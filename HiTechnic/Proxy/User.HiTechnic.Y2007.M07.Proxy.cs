//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.HiTechnic.Y2007.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=772187" +
    "607e5e5359")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy {
    
    
    /// <summary>
    ///            HiTechnic prototype board State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="PrototypeBoardState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Prototype Board state.")]
    public class PrototypeBoardState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PrototypeBoardState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Prototype Board instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic Accelerometer Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private string _ManufactureInfo;
        
        /// <summary>
        ///            The Manufaturer infomation stored at 0x08
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Manufaturer infomation stored at 0x08")]
        public string ManufactureInfo {
            get {
                return this._ManufactureInfo;
            }
            set {
                this._ManufactureInfo = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PrototypeBoardState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._ManufactureInfo = this._ManufactureInfo;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones PrototypeBoardState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PrototypeBoardState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            if ((this._ManufactureInfo == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ManufactureInfo);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes PrototypeBoardState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PrototypeBoardState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._ManufactureInfo = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="PrototypeBoardConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic prototype board Configuration.")]
    public class PrototypeBoardConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PrototypeBoardConfig() {
        }
        
        public PrototypeBoardConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this prototype board instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic prototype board.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PrototypeBoardConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones PrototypeBoardConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PrototypeBoardConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes PrototypeBoardConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PrototypeBoardConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Set LED status
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="LedConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Set LED status")]
    public class LedConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LedConfig() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedStatus _Status;
        
        /// <summary>
        ///            LED status
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Led state")]
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedStatus Status {
            get {
                return this._Status;
            }
            set {
                this._Status = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LedConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig)(target));
            typedTarget._Status = this._Status;
        }
        
        /// <summary>
        ///Clones LedConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LedConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Status)));
        }
        
        /// <summary>
        ///Deserializes LedConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LedConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Status = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedStatus)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            ReadConfiguration
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="ReadConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Values to read from board")]
    public class ReadConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReadConfig() {
        }
        
        private byte[] _TxData;
        
        /// <summary>
        ///            TxData
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("TxData")]
        public byte[] TxData {
            get {
                return this._TxData;
            }
            set {
                this._TxData = value;
            }
        }
        
        private int _ExpectedResponseSize;
        
        /// <summary>
        ///            ExpectedResponseSize
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("ExpectedResponseSize")]
        public int ExpectedResponseSize {
            get {
                return this._ExpectedResponseSize;
            }
            set {
                this._ExpectedResponseSize = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReadConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig)(target));
            if ((this._TxData != null)) {
                int count = this._TxData.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._TxData, 0, tmp, 0, global::System.Buffer.ByteLength(this._TxData));
                typedTarget._TxData = tmp;
            }
            typedTarget._ExpectedResponseSize = this._ExpectedResponseSize;
        }
        
        /// <summary>
        ///Clones ReadConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReadConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._TxData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._TxData.Length);
                writer.Write(this._TxData);
            }
            writer.Write(this._ExpectedResponseSize);
        }
        
        /// <summary>
        ///Deserializes ReadConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReadConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._TxData = reader.ReadBytes(count0);
            }
            this._ExpectedResponseSize = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            I2cReadResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="I2cReadResponse")]
    [global::System.ComponentModel.DescriptionAttribute("I2cReadResponse")]
    public class I2cReadResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2cReadResponse() {
        }
        
        private byte[] _Response;
        
        /// <summary>
        ///            Response
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Response")]
        public byte[] Response {
            get {
                return this._Response;
            }
            set {
                this._Response = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current I2cReadResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2cReadResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2cReadResponse)(target));
            if ((this._Response != null)) {
                int count = this._Response.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._Response, 0, tmp, 0, global::System.Buffer.ByteLength(this._Response));
                typedTarget._Response = tmp;
            }
        }
        
        /// <summary>
        ///Clones I2cReadResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2cReadResponse target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2cReadResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2cReadResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Response == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Response.Length);
                writer.Write(this._Response);
            }
        }
        
        /// <summary>
        ///Deserializes I2cReadResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2cReadResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Response = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Read Compass Sensor Data
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="I2CReadHiTechnicPrototypeBoard")]
    [global::System.ComponentModel.DescriptionAttribute("Reads the I2C HiTechnic prototype board.")]
    public class I2CReadHiTechnicPrototypeBoard : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CReadHiTechnicPrototypeBoard() {
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CReadHiTechnicPrototypeBoard to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CReadHiTechnicPrototypeBoard typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CReadHiTechnicPrototypeBoard)(target));
        }
        
        /// <summary>
        ///Clones I2CReadHiTechnicPrototypeBoard
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CReadHiTechnicPrototypeBoard target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CReadHiTechnicPrototypeBoard();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CReadHiTechnicPrototypeBoard to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes I2CReadHiTechnicPrototypeBoard
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CReadHiTechnicPrototypeBoard</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            LegoResponse: I2C Sensor Type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="I2CResponseHiTechnicPrototypeBoard")]
    [global::System.ComponentModel.DescriptionAttribute("Reads the HiTechnic I2C prototype board.")]
    public class I2CResponseHiTechnicPrototypeBoard : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CResponseHiTechnicPrototypeBoard() {
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CResponseHiTechnicPrototypeBoard to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CResponseHiTechnicPrototypeBoard typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CResponseHiTechnicPrototypeBoard)(target));
        }
        
        /// <summary>
        ///Clones I2CResponseHiTechnicPrototypeBoard
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CResponseHiTechnicPrototypeBoard target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.I2CResponseHiTechnicPrototypeBoard();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CResponseHiTechnicPrototypeBoard to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes I2CResponseHiTechnicPrototypeBoard
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CResponseHiTechnicPrototypeBoard</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Get the HiTechnic Accelerometer Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the HiTechnic prototype board sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the HiTechnic Accelerometer Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set the LED status
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Set LED")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the status of the onboard LED (Off / Red / Blue / Red and Blue)")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetLed : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetLed() {
        }
        
        public SetLed(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body) : 
                base(body) {
        }
        
        public SetLed(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set the LED status
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("ReadFromI2cAddress")]
    [global::System.ComponentModel.DescriptionAttribute("Read from a specified address on the board")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReadFromI2cAddress : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ReadFromI2cAddress() {
        }
        
        public ReadFromI2cAddress(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body) : 
                base(body) {
        }
        
        public ReadFromI2cAddress(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("HiTechnic Accelerometer Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class PrototypeBoardOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick, global:: Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed, global:: Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress> {
        
        public PrototypeBoardOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetLed() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetLed(out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetLed(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetLed(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.LedConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.SetLed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ReadFromI2cAddress() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReadFromI2cAddress(out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ReadFromI2cAddress(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReadFromI2cAddress(global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.ReadFromI2cAddress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            LedStatus control
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
        "tml", ElementName="LedStatus")]
    [global::System.ComponentModel.DescriptionAttribute("Set the onboard LED")]
    public enum LedStatus : int {
        
        /// <summary>
        ///            Off
        ///            </summary>
        Off = 0,
        
        /// <summary>
        ///            Red
        ///            </summary>
        Red = 1,
        
        /// <summary>
        ///            Blue
        ///            </summary>
        Blue = 2,
        
        /// <summary>
        ///            Read and Blue
        ///            </summary>
        RedAndBlue = 3,
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the HiTechnic Prototype Board.\n(for use with \'Lego NXT Brick (" +
        "v2)\' service)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) HiTechnic Prototype Board")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
            "tml";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
                    "tml", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
                    "tml", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.PrototypeBoardOperations = new global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.PrototypeBoardOperations, "http://schemas.microsoft.com/robotics/2012/10/hitechnic/nxt/prototypeboard.user.h" +
                        "tml", "PrototypeBoardOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.PrototypeBoard.Proxy.PrototypeBoardOperations PrototypeBoardOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy {
    
    
    /// <summary>
    ///            HiTechnic Compass Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="CompassConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Compass Sensor Configuration.")]
    public class CompassConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CompassConfig() {
        }
        
        public CompassConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Compass Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic Compass Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CompassConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones CompassConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CompassConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes CompassConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CompassConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Compass State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="CompassSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Compass Sensor state.")]
    public class CompassSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CompassSensorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Compass Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic Compass Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading _Heading;
        
        /// <summary>
        ///            The current compass heading received from the Compass Sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current compass heading received from the Compass Sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading Heading {
            get {
                return this._Heading;
            }
            set {
                this._Heading = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CompassSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            if ((this._Heading != null)) {
                global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading tmp = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Heading)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Heading = tmp;
            }
        }
        
        /// <summary>
        ///Clones CompassSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CompassSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            if ((this._Heading == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Heading)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes CompassSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CompassSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Heading = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            The current compass heading received from the Compass Sensor
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="CompassReading")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the current compass heading received from the Compass Sensor.")]
    public class CompassReading : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CompassReading() {
        }
        
        private double _Degrees;
        
        /// <summary>
        ///            The current compass heading (degrees) received from the Compass Sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current compass heading (degrees) received from the Compass Sensor." +
            "")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double Degrees {
            get {
                return this._Degrees;
            }
            set {
                this._Degrees = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CompassReading to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading)(target));
            typedTarget._Degrees = this._Degrees;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones CompassReading
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CompassReading to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Degrees);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes CompassReading
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CompassReading</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Degrees = reader.ReadDouble();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Read Compass Sensor Data
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="I2CReadHiTechnicCompassSensor")]
    [global::System.ComponentModel.DescriptionAttribute("Reads the I2C HiTechnic Compass sensor.")]
    public class I2CReadHiTechnicCompassSensor : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CReadHiTechnicCompassSensor() {
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CReadHiTechnicCompassSensor to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CReadHiTechnicCompassSensor typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CReadHiTechnicCompassSensor)(target));
        }
        
        /// <summary>
        ///Clones I2CReadHiTechnicCompassSensor
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CReadHiTechnicCompassSensor target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CReadHiTechnicCompassSensor();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CReadHiTechnicCompassSensor to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes I2CReadHiTechnicCompassSensor
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CReadHiTechnicCompassSensor</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            LegoResponse: I2C Sensor Type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="I2CResponseHiTechnicCompassSensor")]
    [global::System.ComponentModel.DescriptionAttribute("Reads the HiTechnic I2C Compass sensor.")]
    public class I2CResponseHiTechnicCompassSensor : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CResponseHiTechnicCompassSensor() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassMode _ModeControl;
        
        /// <summary>
        ///            HiTechnic Compass Mode
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Compass Mode.")]
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassMode ModeControl {
            get {
                return this._ModeControl;
            }
            set {
                this._ModeControl = value;
            }
        }
        
        private int _Heading;
        
        /// <summary>
        ///            Compass Heading
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Compass Heading.")]
        public int Heading {
            get {
                return this._Heading;
            }
            set {
                this._Heading = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CResponseHiTechnicCompassSensor to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CResponseHiTechnicCompassSensor typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CResponseHiTechnicCompassSensor)(target));
            typedTarget._ModeControl = this._ModeControl;
            typedTarget._Heading = this._Heading;
        }
        
        /// <summary>
        ///Clones I2CResponseHiTechnicCompassSensor
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CResponseHiTechnicCompassSensor target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.I2CResponseHiTechnicCompassSensor();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CResponseHiTechnicCompassSensor to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._ModeControl)));
            writer.Write(this._Heading);
        }
        
        /// <summary>
        ///Deserializes I2CResponseHiTechnicCompassSensor
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CResponseHiTechnicCompassSensor</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._ModeControl = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassMode)(reader.ReadInt32()));
            this._Heading = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the HiTechnic Compass Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the HiTechnic Compass Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the HiTechnic Compass sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the HiTechnic Compass Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the HiTechnic Compass sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CompassSensorUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public CompassSensorUpdate() {
        }
        
        public CompassSensorUpdate(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body) : 
                base(body) {
        }
        
        public CompassSensorUpdate(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            HiTechnic Compass Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("HiTechnic Compass Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CompassSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe> {
        
        public CompassSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompassSensorUpdate() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompassSensorUpdate(out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> CompassSensorUpdate(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CompassSensorUpdate(global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassReading();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            HiTechnic Compass Mode
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
        "ml", ElementName="CompassMode")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Compass Mode.")]
    public enum CompassMode : int {
        
        /// <summary>
        ///            The Compass is in Sensor Mode
        ///            </summary>
        Sensor = 0,
        
        /// <summary>
        ///            The Compass failed Calibration
        ///            </summary>
        CalibrationFailed = 2,
        
        /// <summary>
        ///            The Compass is in Calibration Mode
        ///            </summary>
        Calibration = 67,
        
        /// <summary>
        ///            The Compass is in an Unknown Mode
        ///            </summary>
        Unknown = 255,
    }
    
    /// <summary>
    ///            HiTechnic Compass sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the HiTechnic Compass Sensor.\n(for use with \'Lego NXT Brick (v" +
        "2)\' service)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) HiTechnic Compass Sensor")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
            "ml";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
                    "ml", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
                    "ml", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.CompassSensorOperations = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorOperations();
            this.AnalogSensorOperations = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.CompassSensorOperations, "http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/compasssensor.user.ht" +
                        "ml", "CompassSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AnalogSensorOperations, "http://schemas.microsoft.com/robotics/2006/06/analogsensor.html", "AnalogSensorOperations", "/analogsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.Compass.Proxy.CompassSensorOperations CompassSensorOperations;
        
        public global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations AnalogSensorOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy {
    
    
    /// <summary>
    ///            HiTechnic Accelerometer Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml", ElementName="AccelerometerConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Accelerometer Sensor Configuration.")]
    public class AccelerometerConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AccelerometerConfig() {
        }
        
        public AccelerometerConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Accelerometer Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic Accelerometer Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AccelerometerConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones AccelerometerConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AccelerometerConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes AccelerometerConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AccelerometerConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml", ElementName="AccelerometerState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Acceleration Sensor state.")]
    public class AccelerometerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AccelerometerState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Accelerometer Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the HiTechnic Accelerometer Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading _ZeroOffset;
        
        /// <summary>
        ///            Setting ZeroOffset with the initial Tilt values of the robot
        ///            will calibrate the acceleration sensor to an initial pose of X=0, Y=0, Z=0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Calibrates the initial readings of the Accelerometer. \nSetting ZeroOffset with th" +
            "e initial Tilt values of the robot \nwill calibrate the acceleration sensor to an" +
            " initial pose of X=0, Y=0, Z=0.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading ZeroOffset {
            get {
                return this._ZeroOffset;
            }
            set {
                this._ZeroOffset = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading _Tilt;
        
        /// <summary>
        ///            The current tilt readings received from the Accelerometer Sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current tilt readings received from the Acceleration Sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading Tilt {
            get {
                return this._Tilt;
            }
            set {
                this._Tilt = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AccelerometerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            if ((this._ZeroOffset != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
                ((Microsoft.Dss.Core.IDssSerializable)(this._ZeroOffset)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._ZeroOffset = tmp;
            }
            if ((this._Tilt != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Tilt)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Tilt = tmp0;
            }
        }
        
        /// <summary>
        ///Clones AccelerometerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AccelerometerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            if ((this._ZeroOffset == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._ZeroOffset)).Serialize(writer);
            }
            if ((this._Tilt == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Tilt)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes AccelerometerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AccelerometerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._ZeroOffset = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Tilt = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            HiTechnic Read Accelerometer Sensor Data
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml", ElementName="I2CReadHiTechnicAccelerationSensor")]
    [global::System.ComponentModel.DescriptionAttribute("Reads the I2C HiTechnic Acceleration sensor.")]
    public class I2CReadHiTechnicAccelerationSensor : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CReadHiTechnicAccelerationSensor() {
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CReadHiTechnicAccelerationSensor to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CReadHiTechnicAccelerationSensor typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CReadHiTechnicAccelerationSensor)(target));
        }
        
        /// <summary>
        ///Clones I2CReadHiTechnicAccelerationSensor
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CReadHiTechnicAccelerationSensor target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CReadHiTechnicAccelerationSensor();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CReadHiTechnicAccelerationSensor to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes I2CReadHiTechnicAccelerationSensor
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CReadHiTechnicAccelerationSensor</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            LegoResponse: I2C Sensor Type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml", ElementName="I2CResponseHiTechnicAccelerationSensor")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the Acceleration sensor reading.")]
    public class I2CResponseHiTechnicAccelerationSensor : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public I2CResponseHiTechnicAccelerationSensor() {
        }
        
        private int _X;
        
        /// <summary>
        ///            X Axis 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the X Axis.")]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        /// <summary>
        ///            Y Axis 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Y Axis.")]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private int _Z;
        
        /// <summary>
        ///            Z Axis 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Z Axis.")]
        public int Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current I2CResponseHiTechnicAccelerationSensor to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CResponseHiTechnicAccelerationSensor typedTarget = ((global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CResponseHiTechnicAccelerationSensor)(target));
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Z = this._Z;
        }
        
        /// <summary>
        ///Clones I2CResponseHiTechnicAccelerationSensor
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CResponseHiTechnicAccelerationSensor target0 = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.I2CResponseHiTechnicAccelerationSensor();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current I2CResponseHiTechnicAccelerationSensor to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Z);
        }
        
        /// <summary>
        ///Deserializes I2CResponseHiTechnicAccelerationSensor
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized I2CResponseHiTechnicAccelerationSensor</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            this._Z = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the HiTechnic Accelerometer Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the HiTechnic Accelerometer Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the HiTechnic Accelerometer sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the HiTechnic Accelerometer Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the HiTechnic Accelerometer sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AccelerometerUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public AccelerometerUpdate() {
        }
        
        public AccelerometerUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body) : 
                base(body) {
        }
        
        public AccelerometerUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to the HiTechnic Acceleration Sensor
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to the HiTechnic Acceleration Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReliableSubscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations> {
        
        public ReliableSubscribe() {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body) : 
                base(body) {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort, global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations notificationPort) : 
                base(body, responsePort, notificationPort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to the HiTechnic Acceleration Sensor
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to the HiTechnic Acceleration Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort, global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations notificationPort) : 
                base(body, responsePort, notificationPort) {
        }
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("HiTechnic Accelerometer Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AccelerometerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe> {
        
        public AccelerometerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AccelerometerUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AccelerometerUpdate(out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AccelerometerUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AccelerometerUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading body, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.AccelerometerReading();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer Mode
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
        "ml", ElementName="AccelerometerMode")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the HiTechnic Acceleration Sensor Mode.")]
    public enum AccelerometerMode : int {
        
        /// <summary>
        ///            The Accelerometer is in Sensor Mode
        ///            </summary>
        Sensor = 0,
        
        /// <summary>
        ///            The Accelerometer failed Calibration
        ///            </summary>
        CalibrationFailed = 2,
        
        /// <summary>
        ///            The Accelerometer is in Calibration Mode
        ///            </summary>
        Calibration = 67,
        
        /// <summary>
        ///            The Accelerometer is in an Unknown Mode
        ///            </summary>
        Unknown = 255,
    }
    
    /// <summary>
    ///            HiTechnic Accelerometer sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the HiTechnic Acceleration Sensor.\n(for use with \'Lego NXT Bri" +
        "ck (v2)\' service)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) HiTechnic Acceleration Sensor")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
            "ml";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
                    "ml", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
                    "ml", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.AccelerometerOperations = new global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AccelerometerOperations, "http://schemas.microsoft.com/robotics/2007/07/hitechnic/nxt/accelerometer.user.ht" +
                        "ml", "AccelerometerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.HiTechnic.Accelerometer.Proxy.AccelerometerOperations AccelerometerOperations;
    }
}
