//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.NxtBrick.Y2007.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=aeea0a4" +
    "82f1d42d7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_NxtCommState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_NxtCommState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.NxtCommState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_NxtCommState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_NxtCommState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_OpenRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_OpenRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.OpenRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_OpenRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_OpenRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_CloseRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_CloseRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.CloseRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_CloseRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_CloseRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_SendCommandRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_SendCommandRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.SendCommandRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_SendCommandRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_SendCommandRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_ConnectionStatus_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_ConnectionStatus));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.ConnectionStatus), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_ConnectionStatus_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_ConnectionStatus));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_AllStopRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_AllStopRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.AllStopRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_AllStopRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_AllStopRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_SetMotorRotationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_SetMotorRotationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.SetMotorRotationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_SetMotorRotationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_SetMotorRotationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_RotateForDurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_RotateForDurationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.RotateForDurationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_RotateForDurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_RotateForDurationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_SpotlightRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_SpotlightRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.SpotlightRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_SpotlightRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_SpotlightRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_NxtContactSensorArrayState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_NxtContactSensorArrayState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.NxtContactSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_NxtContactSensorArrayState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_NxtContactSensorArrayState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_ResetConfigurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_ResetConfigurationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.ResetConfigurationRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_ResetConfigurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_ResetConfigurationRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_DriveState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_DriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.DriveState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_DriveState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_DriveState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_SetDriveRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_SetDriveRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.SetDriveRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_SetDriveRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_SetDriveRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_ResetMotorPositionRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_ResetMotorPositionRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.ResetMotorPositionRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_ResetMotorPositionRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_ResetMotorPositionRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ModeRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ModeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ModeRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ModeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_ButtonState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_ButtonState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.ButtonState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_ButtonState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_ButtonState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_BatteryState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.BatteryState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_BatteryState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_BatteryState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_ConfigureBatteryRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_ConfigureBatteryRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.ConfigureBatteryRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_ConfigureBatteryRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_ConfigureBatteryRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtBrickState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtBrickState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtBrickState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtBrickState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtBrickState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DisconnectRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DisconnectRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DisconnectRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DisconnectRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DisconnectRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DetachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DetachRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DetachRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DetachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DetachRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Note_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Note));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Note), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Note_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Note));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoResponseException_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoResponseException));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoResponseException), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoResponseException_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoResponseException));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoCategories_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoCategories));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoCategories), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoCategories_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoCategories));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorConfig), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorConfig));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_NxtIOState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_NxtIOState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.NxtIOState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_NxtIOState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_NxtIOState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryFilesRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryFilesRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryFilesRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryFilesRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryFilesRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_DeleteFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_DeleteFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.DeleteFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_DeleteFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_DeleteFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SendFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SendFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SendFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SendFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SendFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StopLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StopLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StopLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StopLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StopLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StartLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StartLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StartLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StartLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StartLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryRunningLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryRunningLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryRunningLegoProgramRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryRunningLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryRunningLegoProgramRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_RunningProgramResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_RunningProgramResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.RunningProgramResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_RunningProgramResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_RunningProgramResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SetBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SetBrickNameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SetBrickNameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SetBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SetBrickNameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryBrickNameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryBrickNameRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryBrickNameRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BrickNameResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BrickNameResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BrickNameResponse), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BrickNameResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BrickNameResponse));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BluetoothMessage_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BluetoothMessage));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BluetoothMessage), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BluetoothMessage_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BluetoothMessage));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ReceiveBluetoothMessageRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ReceiveBluetoothMessageRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ReceiveBluetoothMessageRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ReceiveBluetoothMessageRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ReceiveBluetoothMessageRequest));
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.TouchSensorOn = from.TouchSensorOn;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_TouchSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_TouchSensor_Proxy_TouchSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.TouchSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.TouchSensorOn = from.TouchSensorOn;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_NxtCommState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_NxtCommState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.NxtCommState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.NxtCommState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState)(transformFrom));
            target.ConnectOverBluetooth = from.ConnectOverBluetooth;
            target.Connected = from.Connected;
            global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat> tmp = default(global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat>);
            if ((from.RuntimeStatistics != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat>();
                for (global::System.Collections.Generic.IEnumerator<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode> iterator = from.RuntimeStatistics.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode tmp0 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat);
                    tmp0 = iterator.Current;
                    if ((from.RuntimeStatistics[iterator.Current] != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat(from.RuntimeStatistics[iterator.Current])));
                    }
                    else {
                        tmp1 = null;
                    }
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.RuntimeStatistics = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_NxtCommState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_NxtCommState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.NxtCommState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.NxtCommState)(transformFrom));
            target.ConnectOverBluetooth = from.ConnectOverBluetooth;
            target.Connected = from.Connected;
            global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat> tmp = from.RuntimeStatistics;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat>();
                for (global::System.Collections.Generic.IEnumerator<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat tmp2 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat);
                    tmp1 = iterator.Current;
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat tmp3 = tmp[iterator.Current];
                    if ((tmp3 != null)) {
                        tmp2 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat(tmp3)));
                    }
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.RuntimeStatistics = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat)(transformFrom));
            target.CommandCode = from.CommandCode;
            target.TotalMicroseconds = from.TotalMicroseconds;
            target.Count = from.Count;
            target.AverageMicroseconds = from.AverageMicroseconds;
            target.MinimumMicroseconds = from.MinimumMicroseconds;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_LegoCommandStat_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_LegoCommandStat(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.LegoCommandStat)(transformFrom));
            target.CommandCode = from.CommandCode;
            target.TotalMicroseconds = from.TotalMicroseconds;
            target.Count = from.Count;
            target.AverageMicroseconds = from.AverageMicroseconds;
            target.MinimumMicroseconds = from.MinimumMicroseconds;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_OpenRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_OpenRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.OpenRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.OpenRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest)(transformFrom));
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.ConnectionType = from.ConnectionType;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_OpenRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_OpenRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.OpenRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.OpenRequest)(transformFrom));
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.ConnectionType = from.ConnectionType;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest _cachedInstance0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.CloseRequest _cachedInstance = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.CloseRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_CloseRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_CloseRequest(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_CloseRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_CloseRequest(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_SendCommandRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_SendCommandRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.SendCommandRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.SendCommandRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest)(transformFrom));
            if ((from.LegoCommand != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(from.LegoCommand)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.LegoCommand = tmp;
            }
            else {
                target.LegoCommand = null;
            }
            target.PriorityRequest = from.PriorityRequest;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_SendCommandRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_SendCommandRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.SendCommandRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.SendCommandRequest)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = from.LegoCommand;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.LegoCommand = tmp0;
            }
            target.PriorityRequest = from.PriorityRequest;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_ConnectionStatus_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_ConnectionStatus(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.ConnectionStatus target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.ConnectionStatus();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus)(transformFrom));
            target.Connected = from.Connected;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_ConnectionStatus_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Comm_Proxy_ConnectionStatus(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.ConnectionStatus from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.ConnectionStatus)(transformFrom));
            target.Connected = from.Connected;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.ResetableEncoderDegrees = from.ResetableEncoderDegrees;
            target.CurrentEncoderDegrees = from.CurrentEncoderDegrees;
            target.CurrentEncoderTimeStamp = from.CurrentEncoderTimeStamp;
            target.CurrentMotorRpm = from.CurrentMotorRpm;
            target.AvgEncoderPollingRateMs = from.AvgEncoderPollingRateMs;
            target.CurrentPower = from.CurrentPower;
            target.TargetPower = from.TargetPower;
            target.TargetEncoderDegrees = from.TargetEncoderDegrees;
            target.TargetStopState = from.TargetStopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.ResetableEncoderDegrees = from.ResetableEncoderDegrees;
            target.CurrentEncoderDegrees = from.CurrentEncoderDegrees;
            target.CurrentEncoderTimeStamp = from.CurrentEncoderTimeStamp;
            target.CurrentMotorRpm = from.CurrentMotorRpm;
            target.AvgEncoderPollingRateMs = from.AvgEncoderPollingRateMs;
            target.CurrentPower = from.CurrentPower;
            target.TargetPower = from.TargetPower;
            target.TargetEncoderDegrees = from.TargetEncoderDegrees;
            target.TargetStopState = from.TargetStopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_AllStopRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_AllStopRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.AllStopRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.AllStopRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest)(transformFrom));
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_AllStopRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_AllStopRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.AllStopRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.AllStopRequest)(transformFrom));
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_SetMotorRotationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_SetMotorRotationRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.SetMotorRotationRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.SetMotorRotationRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest)(transformFrom));
            target.TargetPower = from.TargetPower;
            target.RampUp = from.RampUp;
            target.StopAfterDegrees = from.StopAfterDegrees;
            target.StopAfterRotations = from.StopAfterRotations;
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_SetMotorRotationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_SetMotorRotationRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.SetMotorRotationRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.SetMotorRotationRequest)(transformFrom));
            target.TargetPower = from.TargetPower;
            target.RampUp = from.RampUp;
            target.StopAfterDegrees = from.StopAfterDegrees;
            target.StopAfterRotations = from.StopAfterRotations;
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_RotateForDurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_RotateForDurationRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.RotateForDurationRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.RotateForDurationRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest)(transformFrom));
            target.TargetPower = from.TargetPower;
            target.RampUp = from.RampUp;
            target.StopAfterMs = from.StopAfterMs;
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_RotateForDurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_RotateForDurationRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.RotateForDurationRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.RotateForDurationRequest)(transformFrom));
            target.TargetPower = from.TargetPower;
            target.RampUp = from.RampUp;
            target.StopAfterMs = from.StopAfterMs;
            target.StopState = from.StopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig)(transformFrom));
            target.Name = from.Name;
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_MotorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Motor_Proxy_MotorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.MotorConfig)(transformFrom));
            target.Name = from.Name;
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Distance = from.Distance;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_SonarSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SonarSensor_Proxy_SonarSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.SonarSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Distance = from.Distance;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_SpotlightRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_SpotlightRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.SpotlightRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.SpotlightRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_SpotlightRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_SpotlightRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.SpotlightRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.SpotlightRequest)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorConfig)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Intensity = from.Intensity;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_LightSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_LightSensor_Proxy_LightSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.LightSensorState)(transformFrom));
            target.SpotlightOn = from.SpotlightOn;
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Intensity = from.Intensity;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_NxtContactSensorArrayState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_NxtContactSensorArrayState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.NxtContactSensorArrayState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.NxtContactSensorArrayState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState)(transformFrom));
            if ((from.SensorConfiguration != null)) {
                int count = from.SensorConfiguration.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration tmp0 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration);
                    if ((from.SensorConfiguration[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration(from.SensorConfiguration[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.SensorConfiguration = tmp;
            }
            else {
                target.SensorConfiguration = null;
            }
            global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration> tmp1 = default(global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration>);
            if ((from.RuntimeConfiguration != null)) {
                tmp1 = new global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration>();
                for (global::System.Collections.Generic.IEnumerator<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange> iterator = from.RuntimeConfiguration.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange tmp2 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration tmp3 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration);
                    if ((iterator.Current != null)) {
                        tmp2 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange(iterator.Current)));
                    }
                    else {
                        tmp2 = null;
                    }
                    if ((from.RuntimeConfiguration[iterator.Current] != null)) {
                        tmp3 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration(from.RuntimeConfiguration[iterator.Current])));
                    }
                    else {
                        tmp3 = null;
                    }
                    tmp1.Add(tmp2, tmp3);
                }
            }
            else {
                tmp1 = null;
            }
            target.RuntimeConfiguration = tmp1;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_NxtContactSensorArrayState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_NxtContactSensorArrayState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.NxtContactSensorArrayState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.NxtContactSensorArrayState)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration> tmp = from.SensorConfiguration;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.SensorConfiguration = tmp0;
            }
            global::System.Collections.Generic.Dictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration> tmp3 = from.RuntimeConfiguration;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration> tmp4 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration>);
            if ((tmp3 != null)) {
                tmp4 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration>();
                for (global::System.Collections.Generic.IEnumerator<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange> iterator = tmp3.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange tmp5 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration tmp6 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange tmp7 = iterator.Current;
                    if ((tmp7 != null)) {
                        tmp5 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange(tmp7)));
                    }
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration tmp8 = tmp3[iterator.Current];
                    if ((tmp8 != null)) {
                        tmp6 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration(tmp8)));
                    }
                    tmp4.Add(tmp5, tmp6);
                }
            }
            target.RuntimeConfiguration = tmp4;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration)(transformFrom));
            target.RangeName = from.RangeName;
            target.DeviceModel = from.DeviceModel;
            target.DeviceName = from.DeviceName;
            target.SuccessRangeMin = from.SuccessRangeMin;
            target.SuccessRangeMax = from.SuccessRangeMax;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorConfiguration)(transformFrom));
            target.RangeName = from.RangeName;
            target.DeviceModel = from.DeviceModel;
            target.DeviceName = from.DeviceName;
            target.SuccessRangeMin = from.SuccessRangeMin;
            target.SuccessRangeMax = from.SuccessRangeMax;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange)(transformFrom));
            target.SensorPort = from.SensorPort;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.Model = from.Model;
            target.SensorName = from.SensorName;
            target.RangeName = from.RangeName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_SensorRange_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_SensorRange(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.SensorRange)(transformFrom));
            target.SensorPort = from.SensorPort;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.Model = from.Model;
            target.SensorName = from.SensorName;
            target.RangeName = from.RangeName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration)(transformFrom));
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.Name = from.Name;
            target.SuccessRangeMin = from.SuccessRangeMin;
            target.SuccessRangeMax = from.SuccessRangeMax;
            target.AnalogSensorServiceUri = from.AnalogSensorServiceUri;
            target.Contact = from.Contact;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_PortConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_PortConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.PortConfiguration)(transformFrom));
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.Name = from.Name;
            target.SuccessRangeMin = from.SuccessRangeMin;
            target.SuccessRangeMax = from.SuccessRangeMax;
            target.AnalogSensorServiceUri = from.AnalogSensorServiceUri;
            target.Contact = from.Contact;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest _cachedInstance2 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.ResetConfigurationRequest _cachedInstance1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.ResetConfigurationRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_ResetConfigurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_ResetConfigurationRequest(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_ResetConfigurationRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ContactSensorArray_Proxy_ResetConfigurationRequest(object transformFrom) {
            return _cachedInstance2;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_DriveState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_DriveState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.DriveState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.DriveState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState)(transformFrom));
            target.Connected = from.Connected;
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            if ((from.LeftWheel != null)) {
                target.LeftWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration(from.LeftWheel)));
            }
            else {
                target.LeftWheel = null;
            }
            if ((from.RightWheel != null)) {
                target.RightWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration(from.RightWheel)));
            }
            else {
                target.RightWheel = null;
            }
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.TimeStamp = from.TimeStamp;
            if ((from.RuntimeStatistics != null)) {
                target.RuntimeStatistics = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics(from.RuntimeStatistics)));
            }
            else {
                target.RuntimeStatistics = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_DriveState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_DriveState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.DriveState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.DriveState)(transformFrom));
            target.Connected = from.Connected;
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration tmp = from.LeftWheel;
            if ((tmp != null)) {
                target.LeftWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration(tmp)));
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration tmp0 = from.RightWheel;
            if ((tmp0 != null)) {
                target.RightWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration(tmp0)));
            }
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.TimeStamp = from.TimeStamp;
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics tmp1 = from.RuntimeStatistics;
            if ((tmp1 != null)) {
                target.RuntimeStatistics = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics(tmp1)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(transformFrom));
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.WheelDiameter = from.WheelDiameter;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_WheelConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_WheelConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.WheelConfiguration)(transformFrom));
            target.MotorPort = from.MotorPort;
            target.ReversePolarity = from.ReversePolarity;
            target.WheelDiameter = from.WheelDiameter;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics)(transformFrom));
            target.LeftPowerCurrent = from.LeftPowerCurrent;
            target.LeftPowerTarget = from.LeftPowerTarget;
            target.LeftEncoderTimeStamp = from.LeftEncoderTimeStamp;
            target.LeftEncoderCurrent = from.LeftEncoderCurrent;
            target.LeftEncoderTarget = from.LeftEncoderTarget;
            target.LeftMotorRpm = from.LeftMotorRpm;
            target.RightPowerCurrent = from.RightPowerCurrent;
            target.RightPowerTarget = from.RightPowerTarget;
            target.RightEncoderTimeStamp = from.RightEncoderTimeStamp;
            target.RightEncoderCurrent = from.RightEncoderCurrent;
            target.RightEncoderTarget = from.RightEncoderTarget;
            target.RightMotorRpm = from.RightMotorRpm;
            target.TargetStopState = from.TargetStopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_RuntimeStatistics_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_RuntimeStatistics(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.RuntimeStatistics)(transformFrom));
            target.LeftPowerCurrent = from.LeftPowerCurrent;
            target.LeftPowerTarget = from.LeftPowerTarget;
            target.LeftEncoderTimeStamp = from.LeftEncoderTimeStamp;
            target.LeftEncoderCurrent = from.LeftEncoderCurrent;
            target.LeftEncoderTarget = from.LeftEncoderTarget;
            target.LeftMotorRpm = from.LeftMotorRpm;
            target.RightPowerCurrent = from.RightPowerCurrent;
            target.RightPowerTarget = from.RightPowerTarget;
            target.RightEncoderTimeStamp = from.RightEncoderTimeStamp;
            target.RightEncoderCurrent = from.RightEncoderCurrent;
            target.RightEncoderTarget = from.RightEncoderTarget;
            target.RightMotorRpm = from.RightMotorRpm;
            target.TargetStopState = from.TargetStopState;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_SetDriveRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_SetDriveRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.SetDriveRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.SetDriveRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest)(transformFrom));
            target.LeftPower = from.LeftPower;
            target.RightPower = from.RightPower;
            target.LeftStopAtRotationDegrees = from.LeftStopAtRotationDegrees;
            target.RightStopAtRotationDegrees = from.RightStopAtRotationDegrees;
            target.StopState = from.StopState;
            target.isGenericOperation = from.isGenericOperation;
            target.DriveDistanceStage = from.DriveDistanceStage;
            target.RotateDegreesStage = from.RotateDegreesStage;
            target.DriveRequestOperation = from.DriveRequestOperation;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_SetDriveRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_SetDriveRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.SetDriveRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.SetDriveRequest)(transformFrom));
            target.LeftPower = from.LeftPower;
            target.RightPower = from.RightPower;
            target.LeftStopAtRotationDegrees = from.LeftStopAtRotationDegrees;
            target.RightStopAtRotationDegrees = from.RightStopAtRotationDegrees;
            target.StopState = from.StopState;
            target.isGenericOperation = from.isGenericOperation;
            target.DriveDistanceStage = from.DriveDistanceStage;
            target.RotateDegreesStage = from.RotateDegreesStage;
            target.DriveRequestOperation = from.DriveRequestOperation;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_ResetMotorPositionRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_ResetMotorPositionRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.ResetMotorPositionRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.ResetMotorPositionRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest)(transformFrom));
            target.Relative = from.Relative;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_ResetMotorPositionRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Drive_Proxy_ResetMotorPositionRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.ResetMotorPositionRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.ResetMotorPositionRequest)(transformFrom));
            target.Relative = from.Relative;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ModeRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ModeRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ModeRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ModeRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest)(transformFrom));
            target.Mode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorMode)(((int)(from.Mode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ModeRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ModeRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ModeRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ModeRequest)(transformFrom));
            target.Mode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(((int)(from.Mode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorMode)(((int)(from.SensorMode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(((int)(from.SensorMode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorMode)(((int)(from.SensorMode))));
            target.Reading = from.Reading;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_ColorSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_ColorSensor_Proxy_ColorSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.ColorSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(((int)(from.SensorMode))));
            target.Reading = from.Reading;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_ButtonState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_ButtonState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.ButtonState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.ButtonState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState)(transformFrom));
            target.Connected = from.Connected;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            if ((from.Buttons != null)) {
                target.Buttons = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings(from.Buttons)));
            }
            else {
                target.Buttons = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_ButtonState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_ButtonState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.ButtonState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.ButtonState)(transformFrom));
            target.Connected = from.Connected;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings tmp = from.Buttons;
            if ((tmp != null)) {
                target.Buttons = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings)(transformFrom));
            target.PressedRight = from.PressedRight;
            target.PressedLeft = from.PressedLeft;
            target.PressedEnter = from.PressedEnter;
            target.PressedCancel = from.PressedCancel;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_NxtButtonReadings_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Buttons_Proxy_NxtButtonReadings(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.NxtButtonReadings)(transformFrom));
            target.PressedRight = from.PressedRight;
            target.PressedLeft = from.PressedLeft;
            target.PressedEnter = from.PressedEnter;
            target.PressedCancel = from.PressedCancel;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_BatteryState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.BatteryState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.BatteryState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState)(transformFrom));
            target.BatteryPollingSeconds = from.BatteryPollingSeconds;
            target.Connected = from.Connected;
            target.MaxVoltage = from.MaxVoltage;
            target.CriticalBatteryVoltage = from.CriticalBatteryVoltage;
            target.MinVoltage = from.MinVoltage;
            target.PercentBatteryPower = from.PercentBatteryPower;
            target.CurrentBatteryVoltage = from.CurrentBatteryVoltage;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_BatteryState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_BatteryState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.BatteryState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.BatteryState)(transformFrom));
            target.BatteryPollingSeconds = from.BatteryPollingSeconds;
            target.Connected = from.Connected;
            target.MaxVoltage = from.MaxVoltage;
            target.CriticalBatteryVoltage = from.CriticalBatteryVoltage;
            target.MinVoltage = from.MinVoltage;
            target.PercentBatteryPower = from.PercentBatteryPower;
            target.CurrentBatteryVoltage = from.CurrentBatteryVoltage;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_ConfigureBatteryRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_ConfigureBatteryRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.ConfigureBatteryRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.ConfigureBatteryRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest)(transformFrom));
            target.PollingFrequencySeconds = from.PollingFrequencySeconds;
            target.MaxVoltage = from.MaxVoltage;
            target.CriticalBatteryVoltage = from.CriticalBatteryVoltage;
            target.MinVoltage = from.MinVoltage;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_ConfigureBatteryRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Battery_Proxy_ConfigureBatteryRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.ConfigureBatteryRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.ConfigureBatteryRequest)(transformFrom));
            target.PollingFrequencySeconds = from.PollingFrequencySeconds;
            target.MaxVoltage = from.MaxVoltage;
            target.CriticalBatteryVoltage = from.CriticalBatteryVoltage;
            target.MinVoltage = from.MinVoltage;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtBrickState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtBrickState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtBrickState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtBrickState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState)(transformFrom));
            if ((from.Configuration != null)) {
                target.Configuration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration(from.Configuration)));
            }
            else {
                target.Configuration = null;
            }
            if ((from.Runtime != null)) {
                target.Runtime = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime(from.Runtime)));
            }
            else {
                target.Runtime = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtBrickState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtBrickState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtBrickState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtBrickState)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration tmp = from.Configuration;
            if ((tmp != null)) {
                target.Configuration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration(tmp)));
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime tmp0 = from.Runtime;
            if ((tmp0 != null)) {
                target.Runtime = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime(tmp0)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration)(transformFrom));
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.ConnectionType = from.ConnectionType;
            target.ShowInBrowser = from.ShowInBrowser;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_BrickConfiguration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_BrickConfiguration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.BrickConfiguration)(transformFrom));
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.ConnectionType = from.ConnectionType;
            target.ShowInBrowser = from.ShowInBrowser;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime)(transformFrom));
            target.BrickName = from.BrickName;
            target.Firmware = from.Firmware;
            target.Connected = from.Connected;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest> tmp = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest>);
            if ((from.Devices != null)) {
                tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.Devices.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest);
                    tmp0 = iterator.Current;
                    if ((from.Devices[iterator.Current] != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest(from.Devices[iterator.Current])));
                    }
                    else {
                        tmp1 = null;
                    }
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.Devices = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_NxtRuntime_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_NxtRuntime(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.NxtRuntime)(transformFrom));
            target.BrickName = from.BrickName;
            target.Firmware = from.Firmware;
            target.Connected = from.Connected;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest> tmp = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest>);
            if ((from.Devices != null)) {
                tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.Devices.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest);
                    tmp0 = iterator.Current;
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest tmp2 = from.Devices[iterator.Current];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest(tmp2)));
                    }
                    tmp.Add(tmp0, tmp1);
                }
            }
            target.Devices = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest)(transformFrom));
            if ((from.Registration != null)) {
                target.Registration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration(from.Registration)));
            }
            else {
                target.Registration = null;
            }
            if ((from.InitializationCommands != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(from.InitializationCommands)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.InitializationCommands = tmp;
            }
            else {
                target.InitializationCommands = null;
            }
            if ((from.PollingCommands != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(from.PollingCommands)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.PollingCommands = tmp0;
            }
            else {
                target.PollingCommands = null;
            }
            target.Timestamp = from.Timestamp;
            target.Subscriber = from.Subscriber;
            target.Expiration = from.Expiration;
            target.NotificationCount = from.NotificationCount;
            if ((from.TypeFilter != null)) {
                int count = from.TypeFilter.Length;
                string[] tmp1 = new string[count];
                from.TypeFilter.CopyTo(tmp1, 0);
                target.TypeFilter = tmp1;
            }
            else {
                target.TypeFilter = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachRequest)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration tmp = from.Registration;
            if ((tmp != null)) {
                target.Registration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration)(Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration(tmp)));
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp0 = from.InitializationCommands;
            if ((tmp0 != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp0)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                target.InitializationCommands = tmp1;
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp2 = from.PollingCommands;
            if ((tmp2 != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp3 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp2)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                target.PollingCommands = tmp3;
            }
            target.Timestamp = from.Timestamp;
            target.Subscriber = from.Subscriber;
            target.Expiration = from.Expiration;
            target.NotificationCount = from.NotificationCount;
            string[] tmp4 = from.TypeFilter;
            if ((tmp4 != null)) {
                int count = tmp4.Length;
                string[] tmp5 = new string[count];
                tmp4.CopyTo(tmp5, 0);
                target.TypeFilter = tmp5;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration)(transformFrom));
            if ((from.Connection != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(from.Connection)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.Connection = tmp;
            }
            else {
                target.Connection = null;
            }
            target.DeviceType = from.DeviceType;
            target.DeviceModel = from.DeviceModel;
            target.DeviceContract = from.DeviceContract;
            target.ServiceUri = from.ServiceUri;
            target.Name = from.Name;
            target.SubscriberUri = from.SubscriberUri;
            target.I2CBusAddress = from.I2CBusAddress;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Registration_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Registration(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Registration)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = from.Connection;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.Connection = tmp0;
            }
            target.DeviceType = from.DeviceType;
            target.DeviceModel = from.DeviceModel;
            target.DeviceContract = from.DeviceContract;
            target.ServiceUri = from.ServiceUri;
            target.Name = from.Name;
            target.SubscriberUri = from.SubscriberUri;
            target.I2CBusAddress = from.I2CBusAddress;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest _cachedInstance4 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DisconnectRequest _cachedInstance3 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DisconnectRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DisconnectRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DisconnectRequest(object transformFrom) {
            return _cachedInstance3;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DisconnectRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DisconnectRequest(object transformFrom) {
            return _cachedInstance4;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse)(transformFrom));
            if ((from.Connection != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(from.Connection)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.Connection = tmp;
            }
            else {
                target.Connection = null;
            }
            target.DeviceModel = from.DeviceModel;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AttachResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AttachResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AttachResponse)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = from.Connection;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.Connection = tmp0;
            }
            target.DeviceModel = from.DeviceModel;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DetachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DetachRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DetachRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DetachRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest)(transformFrom));
            target.ServiceUri = from.ServiceUri;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_DetachRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_DetachRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DetachRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.DetachRequest)(transformFrom));
            target.ServiceUri = from.ServiceUri;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest)(transformFrom));
            target.ServiceUri = from.ServiceUri;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyRequest)(transformFrom));
            target.ServiceUri = from.ServiceUri;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse)(transformFrom));
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_AdjustPollingFrequencyResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_AdjustPollingFrequencyResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.AdjustPollingFrequencyResponse)(transformFrom));
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Note_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Note(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Note target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Note();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note)(transformFrom));
            target.Frequency = from.Frequency;
            target.Duration = from.Duration;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Note_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_Note(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Note from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Note)(transformFrom));
            target.Frequency = from.Frequency;
            target.Duration = from.Duration;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoResponseException_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoResponseException(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoResponseException target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoResponseException();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException)(transformFrom));
            if ((from.OriginalCommand != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(from.OriginalCommand)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.OriginalCommand = tmp;
            }
            else {
                target.OriginalCommand = null;
            }
            target.ErrorMessage = from.ErrorMessage;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoResponseException_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoResponseException(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoResponseException from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoResponseException)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = from.OriginalCommand;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.OriginalCommand = tmp0;
            }
            target.ErrorMessage = from.ErrorMessage;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories _cachedInstance6 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoCategories _cachedInstance5 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.LegoCategories();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoCategories_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoCategories(object transformFrom) {
            return _cachedInstance5;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_LegoCategories_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_Brick_Proxy_LegoCategories(object transformFrom) {
            return _cachedInstance6;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorConfig_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorConfig(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorConfig from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorConfig)(transformFrom));
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Intensity = from.Intensity;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_SoundSensorState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_SoundSensor_Proxy_SoundSensorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.SoundSensorState)(transformFrom));
            target.Connected = from.Connected;
            target.Name = from.Name;
            target.SensorPort = from.SensorPort;
            target.PollingFrequencyMs = from.PollingFrequencyMs;
            target.Intensity = from.Intensity;
            target.TimeStamp = from.TimeStamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_NxtIOState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_NxtIOState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.NxtIOState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.NxtIOState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState)(transformFrom));
            if ((from.ResponseFiles != null)) {
                target.ResponseFiles = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles)(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles(from.ResponseFiles)));
            }
            else {
                target.ResponseFiles = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_NxtIOState_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_NxtIOState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.NxtIOState from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.NxtIOState)(transformFrom));
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles tmp = from.ResponseFiles;
            if ((tmp != null)) {
                target.ResponseFiles = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles)(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles)(transformFrom));
            if ((from.Files != null)) {
                int count = from.Files.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile tmp0 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile);
                    if ((from.Files[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile)(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile(from.Files[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Files = tmp;
            }
            else {
                target.Files = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ResponseFiles_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ResponseFiles(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ResponseFiles)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile> tmp = from.Files;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile tmp1 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile);
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile)(Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Files = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile)(transformFrom));
            target.FileName = from.FileName;
            target.FileSize = from.FileSize;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_LegoFile_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_LegoFile(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.LegoFile)(transformFrom));
            target.FileName = from.FileName;
            target.FileSize = from.FileSize;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryFilesRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryFilesRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryFilesRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryFilesRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest)(transformFrom));
            target.Filespec = from.Filespec;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryFilesRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryFilesRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryFilesRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryFilesRequest)(transformFrom));
            target.Filespec = from.Filespec;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_DeleteFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_DeleteFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.DeleteFileRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.DeleteFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest)(transformFrom));
            target.FileName = from.FileName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_DeleteFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_DeleteFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.DeleteFileRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.DeleteFileRequest)(transformFrom));
            target.FileName = from.FileName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SendFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SendFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SendFileRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SendFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest)(transformFrom));
            target.FileLocation = from.FileLocation;
            if ((from.FileData != null)) {
                int count = from.FileData.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(from.FileData, 0, tmp0, 0, global::System.Buffer.ByteLength(from.FileData));
                target.FileData = tmp0;
            }
            else {
                target.FileData = null;
            }
            target.FileName = from.FileName;
            target.ReplaceExistingFile = from.ReplaceExistingFile;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SendFileRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SendFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SendFileRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SendFileRequest)(transformFrom));
            global::System.Uri tmp = from.FileLocation;
            target.FileLocation = tmp;
            byte[] tmp1 = from.FileData;
            if ((tmp1 != null)) {
                int count = tmp1.Length;
                byte[] tmp2 = new byte[count];
                global::System.Buffer.BlockCopy(tmp1, 0, tmp2, 0, global::System.Buffer.ByteLength(tmp1));
                target.FileData = tmp2;
            }
            target.FileName = from.FileName;
            target.ReplaceExistingFile = from.ReplaceExistingFile;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest _cachedInstance8 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StopLegoProgramRequest _cachedInstance7 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StopLegoProgramRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StopLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StopLegoProgramRequest(object transformFrom) {
            return _cachedInstance7;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StopLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StopLegoProgramRequest(object transformFrom) {
            return _cachedInstance8;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StartLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StartLegoProgramRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StartLegoProgramRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StartLegoProgramRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest)(transformFrom));
            target.Program = from.Program;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_StartLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_StartLegoProgramRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StartLegoProgramRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.StartLegoProgramRequest)(transformFrom));
            target.Program = from.Program;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest _cachedInstance10 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryRunningLegoProgramRequest _cachedInstance9 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryRunningLegoProgramRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryRunningLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryRunningLegoProgramRequest(object transformFrom) {
            return _cachedInstance9;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryRunningLegoProgramRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryRunningLegoProgramRequest(object transformFrom) {
            return _cachedInstance10;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_RunningProgramResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_RunningProgramResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.RunningProgramResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.RunningProgramResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse)(transformFrom));
            target.Program = from.Program;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_RunningProgramResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_RunningProgramResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.RunningProgramResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.RunningProgramResponse)(transformFrom));
            target.Program = from.Program;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SetBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SetBrickNameRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SetBrickNameRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SetBrickNameRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest)(transformFrom));
            target.BrickName = from.BrickName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_SetBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_SetBrickNameRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SetBrickNameRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.SetBrickNameRequest)(transformFrom));
            target.BrickName = from.BrickName;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest _cachedInstance12 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
        
        private static global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryBrickNameRequest _cachedInstance11 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.QueryBrickNameRequest();
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryBrickNameRequest(object transformFrom) {
            return _cachedInstance11;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_QueryBrickNameRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_QueryBrickNameRequest(object transformFrom) {
            return _cachedInstance12;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BrickNameResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BrickNameResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BrickNameResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BrickNameResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse)(transformFrom));
            target.BrickName = from.BrickName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BrickNameResponse_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BrickNameResponse(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BrickNameResponse from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BrickNameResponse)(transformFrom));
            target.BrickName = from.BrickName;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BluetoothMessage_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BluetoothMessage(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BluetoothMessage target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BluetoothMessage();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage)(transformFrom));
            target.Mailbox = from.Mailbox;
            target.Message = from.Message;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_BluetoothMessage_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_BluetoothMessage(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BluetoothMessage from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.BluetoothMessage)(transformFrom));
            target.Mailbox = from.Mailbox;
            target.Message = from.Message;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ReceiveBluetoothMessageRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ReceiveBluetoothMessageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ReceiveBluetoothMessageRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ReceiveBluetoothMessageRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest)(transformFrom));
            target.Mailbox = from.Mailbox;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_ReceiveBluetoothMessageRequest_TO_Microsoft_Robotics_Services_Sample_Lego_Nxt_IO_Proxy_ReceiveBluetoothMessageRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest target = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ReceiveBluetoothMessageRequest from = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.ReceiveBluetoothMessageRequest)(transformFrom));
            target.Mailbox = from.Mailbox;
            return target;
        }
    }
}
