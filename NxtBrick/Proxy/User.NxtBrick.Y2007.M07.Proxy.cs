//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.NxtBrick.Y2007.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=aeea0a4" +
    "82f1d42d7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy {
    
    
    /// <summary>
    ///            LEGO NXT Touch Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html", ElementName="TouchSensorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Touch Sensor Configuration.")]
    public class TouchSensorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TouchSensorConfig() {
        }
        
        public TouchSensorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Touch Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Touch Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TouchSensorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones TouchSensorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TouchSensorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes TouchSensorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TouchSensorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Touch Sensor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html", ElementName="TouchSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Touch Sensor state.")]
    public class TouchSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TouchSensorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Touch Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Touch Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private bool _TouchSensorOn;
        
        /// <summary>
        ///            The current state of the active Touch Sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current state of the active Touch Sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool TouchSensorOn {
            get {
                return this._TouchSensorOn;
            }
            set {
                this._TouchSensorOn = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TouchSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._TouchSensorOn = this._TouchSensorOn;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones TouchSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TouchSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(this._TouchSensorOn);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes TouchSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TouchSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._TouchSensorOn = reader.ReadBoolean();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Touch Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Touch Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Touch Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Touch Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the LEGO NXT Touch Sensor State.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TouchSensorUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public TouchSensorUpdate() {
        }
        
        public TouchSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body) : 
                base(body) {
        }
        
        public TouchSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO NXT Touch Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO NXT Touch Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TouchSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate, global:: Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe> {
        
        public TouchSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TouchSensorUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TouchSensorUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TouchSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TouchSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Touch Sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Touch Sensor (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Touch Sensor ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.TouchSensorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorOperations();
            this.ContactSensorArrayOperations = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.TouchSensorOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/touchsensor.user.html", "TouchSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ContactSensorArrayOperations, "http://schemas.microsoft.com/2006/06/contactsensor.html", "ContactSensorArrayOperations", "/contactsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.TouchSensor.Proxy.TouchSensorOperations TouchSensorOperations;
        
        public global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations ContactSensorArrayOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy {
    
    
    /// <summary>
    ///            The LegoComm State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="NxtCommState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO Communications state.")]
    public class NxtCommState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtCommState() {
        }
        
        private bool _ConnectOverBluetooth;
        
        /// <summary>
        ///            Connect using Bluetooth
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Connects using Bluetooth.")]
        public bool ConnectOverBluetooth {
            get {
                return this._ConnectOverBluetooth;
            }
            set {
                this._ConnectOverBluetooth = value;
            }
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the connection currently active?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies if the service is currently open and connected to a LEGO NXT brick.")]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat> _RuntimeStatistics;
        
        /// <summary>
        ///            Communication Statistics by LEGO Command.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Communication Statistics by LEGO Command.")]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat> RuntimeStatistics {
            get {
                return this._RuntimeStatistics;
            }
            set {
                this._RuntimeStatistics = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtCommState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState)(target));
            typedTarget._ConnectOverBluetooth = this._ConnectOverBluetooth;
            typedTarget._Connected = this._Connected;
            if ((this._RuntimeStatistics != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat> tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeStatistics)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RuntimeStatistics = tmp;
            }
        }
        
        /// <summary>
        ///Clones NxtCommState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtCommState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._ConnectOverBluetooth);
            writer.Write(this._Connected);
            if ((this._RuntimeStatistics == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeStatistics)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes NxtCommState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtCommState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._ConnectOverBluetooth = reader.ReadBoolean();
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._RuntimeStatistics = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat>())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Communication statistics by LEGO Command.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="LegoCommandStat")]
    [global::System.ComponentModel.DescriptionAttribute("Communication statistics by LEGO Command.")]
    public class LegoCommandStat : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LegoCommandStat() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode _CommandCode;
        
        /// <summary>
        ///            The LEGO Command Code
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the LEGO Command Code.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode CommandCode {
            get {
                return this._CommandCode;
            }
            set {
                this._CommandCode = value;
            }
        }
        
        private double _TotalMicroseconds;
        
        /// <summary>
        ///            Total Milliseconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Total Microseconds.")]
        public double TotalMicroseconds {
            get {
                return this._TotalMicroseconds;
            }
            set {
                this._TotalMicroseconds = value;
            }
        }
        
        private long _Count;
        
        /// <summary>
        ///            Number of times this command has been measured.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Number of times this command has been measured.")]
        public long Count {
            get {
                return this._Count;
            }
            set {
                this._Count = value;
            }
        }
        
        private double _AverageMicroseconds;
        
        /// <summary>
        ///            Average Microseconds (�sec).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Average Microseconds (�sec).")]
        public double AverageMicroseconds {
            get {
                return this._AverageMicroseconds;
            }
            set {
                this._AverageMicroseconds = value;
            }
        }
        
        private double _MinimumMicroseconds;
        
        /// <summary>
        ///            The quickest command completion (Microseconds).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The quickest command completion (Microseconds).")]
        public double MinimumMicroseconds {
            get {
                return this._MinimumMicroseconds;
            }
            set {
                this._MinimumMicroseconds = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LegoCommandStat to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat)(target));
            typedTarget._CommandCode = this._CommandCode;
            typedTarget._TotalMicroseconds = this._TotalMicroseconds;
            typedTarget._Count = this._Count;
            typedTarget._AverageMicroseconds = this._AverageMicroseconds;
            typedTarget._MinimumMicroseconds = this._MinimumMicroseconds;
        }
        
        /// <summary>
        ///Clones LegoCommandStat
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommandStat();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LegoCommandStat to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((byte)(this._CommandCode)));
            writer.Write(this._TotalMicroseconds);
            writer.Write(this._Count);
            writer.Write(this._AverageMicroseconds);
            writer.Write(this._MinimumMicroseconds);
        }
        
        /// <summary>
        ///Deserializes LegoCommandStat
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LegoCommandStat</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._CommandCode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoCommandCode)(reader.ReadByte()));
            this._TotalMicroseconds = reader.ReadDouble();
            this._Count = reader.ReadInt64();
            this._AverageMicroseconds = reader.ReadDouble();
            this._MinimumMicroseconds = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Open a connection to the LEGO NXT Hardware
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="OpenRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Open a connection to the LEGO NXT Hardware.")]
    public class OpenRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public OpenRequest() {
        }
        
        private int _SerialPort;
        
        /// <summary>
        ///            Serial Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Serial Communications Port.")]
        public int SerialPort {
            get {
                return this._SerialPort;
            }
            set {
                this._SerialPort = value;
            }
        }
        
        private int _BaudRate;
        
        /// <summary>
        ///            Baud Rate (0 = default)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Baud Rate (0 = default).")]
        public int BaudRate {
            get {
                return this._BaudRate;
            }
            set {
                this._BaudRate = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType _ConnectionType;
        
        /// <summary>
        ///            Connection Type (USB or Bluetooth)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Connection Type (USB or Bluetooth).\n(USB is not currently supporte" +
            "d).")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType ConnectionType {
            get {
                return this._ConnectionType;
            }
            set {
                this._ConnectionType = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current OpenRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest)(target));
            typedTarget._SerialPort = this._SerialPort;
            typedTarget._BaudRate = this._BaudRate;
            typedTarget._ConnectionType = this._ConnectionType;
        }
        
        /// <summary>
        ///Clones OpenRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current OpenRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SerialPort);
            writer.Write(this._BaudRate);
            writer.Write(((int)(this._ConnectionType)));
        }
        
        /// <summary>
        ///Deserializes OpenRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized OpenRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SerialPort = reader.ReadInt32();
            this._BaudRate = reader.ReadInt32();
            this._ConnectionType = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Close the connection to the LEGO NXT Hardware
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="CloseRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Closes the connection to the LEGO NXT Hardware.")]
    public class CloseRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CloseRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CloseRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest)(target));
        }
        
        /// <summary>
        ///Clones CloseRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CloseRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes CloseRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CloseRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Send Lego Command Request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="SendCommandRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Sends Lego Command Requests.")]
    public class SendCommandRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SendCommandRequest() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand _LegoCommand;
        
        /// <summary>
        ///            The LEGO Command
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The LEGO Command")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand LegoCommand {
            get {
                return this._LegoCommand;
            }
            set {
                this._LegoCommand = value;
            }
        }
        
        private bool _PriorityRequest;
        
        /// <summary>
        ///            Process in the Priority Queue
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Process in the Priority Queue")]
        public bool PriorityRequest {
            get {
                return this._PriorityRequest;
            }
            set {
                this._PriorityRequest = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SendCommandRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest)(target));
            if ((this._LegoCommand != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LegoCommand)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._LegoCommand = tmp;
            }
            typedTarget._PriorityRequest = this._PriorityRequest;
        }
        
        /// <summary>
        ///Clones SendCommandRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SendCommandRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._LegoCommand == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LegoCommand)).Serialize(writer);
            }
            writer.Write(this._PriorityRequest);
        }
        
        /// <summary>
        ///Deserializes SendCommandRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SendCommandRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._LegoCommand = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand())).Deserialize(reader)));
            }
            this._PriorityRequest = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Indicates an update to the Connection Status.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", ElementName="ConnectionStatus")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the Connection Status.")]
    public class ConnectionStatus : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ConnectionStatus() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            The current connection status.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies if the service is currently open and connected to a LEGO NXT brick.")]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ConnectionStatus to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus)(target));
            typedTarget._Connected = this._Connected;
        }
        
        /// <summary>
        ///Clones ConnectionStatus
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ConnectionStatus to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
        }
        
        /// <summary>
        ///Deserializes ConnectionStatus
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ConnectionStatus</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            LegoComm Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current LEGO NXT Communications state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Open communication to the LEGO NXT Hardware
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Open communication to the LEGO NXT Hardware.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Open : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Open() {
        }
        
        public Open(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body) : 
                base(body) {
        }
        
        public Open(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Close connection to the LEGO NXT Hardware
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Close connection to the LEGO NXT Hardware.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Close : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Close() {
        }
        
        public Close(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body) : 
                base(body) {
        }
        
        public Close(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send a command to the LEGO NXT Brick
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Send a LEGO Command to the LEGO NXT Hardware.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendCommand : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault>> {
        
        public SendCommand() {
        }
        
        public SendCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body) : 
                base(body) {
        }
        
        public SendCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to ConnectionUpdate Notifications.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe to ConnectionUpdate Notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates a change to the connection status.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates a change to the Connection Status.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectionUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectionUpdate() {
        }
        
        public ConnectionUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body) : 
                base(body) {
        }
        
        public ConnectionUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LegoComm Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LegoComm Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LegoCommOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate> {
        
        public LegoCommOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.NxtCommState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Open() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Open(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Open(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Open(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.OpenRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Open(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Close() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Close(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Close(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Close(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.CloseRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Close(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendCommand() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendCommand(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommandRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.SendCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectionUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectionUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectionUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectionUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionStatus();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.ConnectionUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for LegoComm.
    ///            All communication with the LEGO Hardware is done through this service.
    ///            This service is started automatically by the LEGO NXT Brick service.
    ///            </summary>
    /// <remarks>The LEGO Communications service calls to the serial port and may block a thread
    ///            The ActivationSettings attribute with ShareDispatch = false makes the runtime
    ///            dedicate a dispatcher thread pool just for this service.</remarks>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Communications Service which is resp" +
        "onsible for all communications with the LEGO NXT Hardware. \n*** INTERNAL - DO NO" +
        "T START THIS SERVICE DIRECTLY ***")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) LegoNxtComm")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.LegoCommOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.LegoCommOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/comm.user.html", "LegoCommOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Comm.Proxy.LegoCommOperations LegoCommOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy {
    
    
    /// <summary>
    ///            LEGO NXT Motor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", ElementName="MotorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Motor state.")]
    public class MotorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MotorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Motor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            Specifies the descriptive identifier for the motor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Motor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort _MotorPort;
        
        /// <summary>
        ///            LEGO NXT Motor Port.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Motor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort MotorPort {
            get {
                return this._MotorPort;
            }
            set {
                this._MotorPort = value;
            }
        }
        
        private bool _ReversePolarity;
        
        /// <summary>
        ///            Indicates the direction (polarity) of the motor.
        ///            (Enabling this option (true) reverses the motor)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the direction (polarity) of the motor.\\n(Enabling this option (true) re" +
            "verses the motor.)")]
        public bool ReversePolarity {
            get {
                return this._ReversePolarity;
            }
            set {
                this._ReversePolarity = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency Milliseconds (0-N, -1 disabled)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds. \n(0 = default; -1 = disabled; > " +
            "0 = ms)")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private long _ResetableEncoderDegrees;
        
        /// <summary>
        ///            Motor Encoder. Current reading in degrees since the last user reset.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current value of the Motor Encoder (degrees) since the last user r" +
            "eset.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public long ResetableEncoderDegrees {
            get {
                return this._ResetableEncoderDegrees;
            }
            set {
                this._ResetableEncoderDegrees = value;
            }
        }
        
        private long _CurrentEncoderDegrees;
        
        /// <summary>
        ///            Motor Encoder.  Current reading in degrees since the NXT was activated.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current value of the Motor Encoder (degrees) since the NXT was act" +
            "ivated.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public long CurrentEncoderDegrees {
            get {
                return this._CurrentEncoderDegrees;
            }
            set {
                this._CurrentEncoderDegrees = value;
            }
        }
        
        private global::System.DateTime _CurrentEncoderTimeStamp;
        
        /// <summary>
        ///            Current Encoder TimeStamp.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the last Encoder reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime CurrentEncoderTimeStamp {
            get {
                return this._CurrentEncoderTimeStamp;
            }
            set {
                this._CurrentEncoderTimeStamp = value;
            }
        }
        
        private int _CurrentMotorRpm;
        
        /// <summary>
        ///            The Current Motor Speed (RPM).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current Motor Speed (RPM).")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int CurrentMotorRpm {
            get {
                return this._CurrentMotorRpm;
            }
            set {
                this._CurrentMotorRpm = value;
            }
        }
        
        private double _AvgEncoderPollingRateMs;
        
        /// <summary>
        ///            The average polling rate (ms).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the average polling rate (ms).")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double AvgEncoderPollingRateMs {
            get {
                return this._AvgEncoderPollingRateMs;
            }
            set {
                this._AvgEncoderPollingRateMs = value;
            }
        }
        
        private double _CurrentPower;
        
        /// <summary>
        ///            Indicates the current power applied to the motor; range is -1.0 to 1.0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current power applied to the motor; range is -1.0 to 1.0.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double CurrentPower {
            get {
                return this._CurrentPower;
            }
            set {
                this._CurrentPower = value;
            }
        }
        
        private double _TargetPower;
        
        /// <summary>
        ///            Indicates the motor power which was last requested. (range is -1.0 to 1.0)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the motor power which was last requested. \n(range is -1.0 to 1.0)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double TargetPower {
            get {
                return this._TargetPower;
            }
            set {
                this._TargetPower = value;
            }
        }
        
        private long _TargetEncoderDegrees;
        
        /// <summary>
        ///            Current Motor Encoder Target (0-No Target).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current Motor Encoder Target (0-No Target).")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public long TargetEncoderDegrees {
            get {
                return this._TargetEncoderDegrees;
            }
            set {
                this._TargetEncoderDegrees = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _TargetStopState;
        
        /// <summary>
        ///            Specifies how to stop after the Target Encoder degrees are reached.
        ///            Valid when Stopping after Degrees or Rotations.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies how to stop after the Target Encoder degrees are reached. \nValid when " +
            "Stopping after Degrees or Rotations.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState TargetStopState {
            get {
                return this._TargetStopState;
            }
            set {
                this._TargetStopState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MotorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._MotorPort = this._MotorPort;
            typedTarget._ReversePolarity = this._ReversePolarity;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._ResetableEncoderDegrees = this._ResetableEncoderDegrees;
            typedTarget._CurrentEncoderDegrees = this._CurrentEncoderDegrees;
            typedTarget._CurrentEncoderTimeStamp = this._CurrentEncoderTimeStamp;
            typedTarget._CurrentMotorRpm = this._CurrentMotorRpm;
            typedTarget._AvgEncoderPollingRateMs = this._AvgEncoderPollingRateMs;
            typedTarget._CurrentPower = this._CurrentPower;
            typedTarget._TargetPower = this._TargetPower;
            typedTarget._TargetEncoderDegrees = this._TargetEncoderDegrees;
            typedTarget._TargetStopState = this._TargetStopState;
        }
        
        /// <summary>
        ///Clones MotorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MotorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._MotorPort)));
            writer.Write(this._ReversePolarity);
            writer.Write(this._PollingFrequencyMs);
            writer.Write(this._ResetableEncoderDegrees);
            writer.Write(this._CurrentEncoderDegrees);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._CurrentEncoderTimeStamp, writer);
            writer.Write(this._CurrentMotorRpm);
            writer.Write(this._AvgEncoderPollingRateMs);
            writer.Write(this._CurrentPower);
            writer.Write(this._TargetPower);
            writer.Write(this._TargetEncoderDegrees);
            writer.Write(((int)(this._TargetStopState)));
        }
        
        /// <summary>
        ///Deserializes MotorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MotorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._MotorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort)(reader.ReadInt32()));
            this._ReversePolarity = reader.ReadBoolean();
            this._PollingFrequencyMs = reader.ReadInt32();
            this._ResetableEncoderDegrees = reader.ReadInt64();
            this._CurrentEncoderDegrees = reader.ReadInt64();
            this._CurrentEncoderTimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._CurrentMotorRpm = reader.ReadInt32();
            this._AvgEncoderPollingRateMs = reader.ReadDouble();
            this._CurrentPower = reader.ReadDouble();
            this._TargetPower = reader.ReadDouble();
            this._TargetEncoderDegrees = reader.ReadInt64();
            this._TargetStopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Stop Request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", ElementName="AllStopRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests to Stop a motor.")]
    public class AllStopRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AllStopRequest() {
        }
        
        public AllStopRequest(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState stopState) {
            this._StopState = stopState;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _StopState;
        
        /// <summary>
        ///            Stop State
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops by applying brakes or coasting.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState StopState {
            get {
                return this._StopState;
            }
            set {
                this._StopState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AllStopRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest)(target));
            typedTarget._StopState = this._StopState;
        }
        
        /// <summary>
        ///Clones AllStopRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AllStopRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._StopState)));
        }
        
        /// <summary>
        ///Deserializes AllStopRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AllStopRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._StopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Rotate the LEGO Motor at the specified motor power.
    ///            Optionally stop afer the specified degrees.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", ElementName="SetMotorRotationRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Rotates the LEGO Motor at the specified motor power. \nOptionally stop afer the sp" +
        "ecified degrees.")]
    public class SetMotorRotationRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetMotorRotationRequest() {
        }
        
        public SetMotorRotationRequest(double targetPower, double stopAfterDegrees, double stopAfterRotations) {
            this._TargetPower = targetPower;
            this._StopAfterDegrees = stopAfterDegrees;
            this._StopAfterRotations = stopAfterRotations;
        }
        
        private double _TargetPower;
        
        /// <summary>
        ///            Target Power (-1.0 - 1.0)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Target Power (-1.0 - 1.0)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double TargetPower {
            get {
                return this._TargetPower;
            }
            set {
                this._TargetPower = value;
            }
        }
        
        private bool _RampUp;
        
        /// <summary>
        ///            Gradually Ramp Up the power until the target Power is reached.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Requests a gradual Ramp Up of the power until the target Power is reached.")]
        public bool RampUp {
            get {
                return this._RampUp;
            }
            set {
                this._RampUp = value;
            }
        }
        
        private double _StopAfterDegrees;
        
        /// <summary>
        ///            Stop Motor after the specified Degrees (0-ignore).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops the Motor after the specified Degrees (0-ignore).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public double StopAfterDegrees {
            get {
                return this._StopAfterDegrees;
            }
            set {
                this._StopAfterDegrees = value;
            }
        }
        
        private double _StopAfterRotations;
        
        /// <summary>
        ///            Stop Motor after the specified Rotations (0-ignore).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops the Motor after the specified Rotations (0-ignore).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public double StopAfterRotations {
            get {
                return this._StopAfterRotations;
            }
            set {
                this._StopAfterRotations = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _StopState;
        
        /// <summary>
        ///            Stop State
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops by applying brakes or coasting. \nValid when Stopping after Degrees or Rotat" +
            "ions.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState StopState {
            get {
                return this._StopState;
            }
            set {
                this._StopState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetMotorRotationRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest)(target));
            typedTarget._TargetPower = this._TargetPower;
            typedTarget._RampUp = this._RampUp;
            typedTarget._StopAfterDegrees = this._StopAfterDegrees;
            typedTarget._StopAfterRotations = this._StopAfterRotations;
            typedTarget._StopState = this._StopState;
        }
        
        /// <summary>
        ///Clones SetMotorRotationRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetMotorRotationRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TargetPower);
            writer.Write(this._RampUp);
            writer.Write(this._StopAfterDegrees);
            writer.Write(this._StopAfterRotations);
            writer.Write(((int)(this._StopState)));
        }
        
        /// <summary>
        ///Deserializes SetMotorRotationRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetMotorRotationRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TargetPower = reader.ReadDouble();
            this._RampUp = reader.ReadBoolean();
            this._StopAfterDegrees = reader.ReadDouble();
            this._StopAfterRotations = reader.ReadDouble();
            this._StopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Rotate the LEGO Motor at the specified motor power for the specified duration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", ElementName="RotateForDurationRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Rotates the LEGO Motor at the specified motor power for the specified duration.")]
    public class RotateForDurationRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RotateForDurationRequest() {
        }
        
        public RotateForDurationRequest(double targetPower, double stopAfterMs) {
            this._TargetPower = targetPower;
            this._StopAfterMs = stopAfterMs;
        }
        
        private double _TargetPower;
        
        /// <summary>
        ///            Target Power (-1.0 - 1.0)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Target Power (-1.0 - 1.0)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double TargetPower {
            get {
                return this._TargetPower;
            }
            set {
                this._TargetPower = value;
            }
        }
        
        private bool _RampUp;
        
        /// <summary>
        ///            Gradually Ramp Up the power until the target Power is reached.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Requests the motor to gradually Ramp Up the power until the target Power is reach" +
            "ed.")]
        public bool RampUp {
            get {
                return this._RampUp;
            }
            set {
                this._RampUp = value;
            }
        }
        
        private double _StopAfterMs;
        
        /// <summary>
        ///            Stop Motor after the specified duration (ms).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops Motor after the specified duration (ms).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public double StopAfterMs {
            get {
                return this._StopAfterMs;
            }
            set {
                this._StopAfterMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _StopState;
        
        /// <summary>
        ///            Stop State
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops by applying brakes or coasting.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState StopState {
            get {
                return this._StopState;
            }
            set {
                this._StopState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RotateForDurationRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest)(target));
            typedTarget._TargetPower = this._TargetPower;
            typedTarget._RampUp = this._RampUp;
            typedTarget._StopAfterMs = this._StopAfterMs;
            typedTarget._StopState = this._StopState;
        }
        
        /// <summary>
        ///Clones RotateForDurationRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RotateForDurationRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TargetPower);
            writer.Write(this._RampUp);
            writer.Write(this._StopAfterMs);
            writer.Write(((int)(this._StopState)));
        }
        
        /// <summary>
        ///Deserializes RotateForDurationRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RotateForDurationRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TargetPower = reader.ReadDouble();
            this._RampUp = reader.ReadBoolean();
            this._StopAfterMs = reader.ReadDouble();
            this._StopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Motor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", ElementName="MotorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Motor Configuration.")]
    public class MotorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MotorConfig() {
        }
        
        public MotorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort motorPort) {
            this._MotorPort = motorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Motor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Motor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort _MotorPort;
        
        /// <summary>
        ///            LEGO NXT Motor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Motor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort MotorPort {
            get {
                return this._MotorPort;
            }
            set {
                this._MotorPort = value;
            }
        }
        
        private bool _ReversePolarity;
        
        /// <summary>
        ///            Indicates the direction (polarity) of the motor.
        ///            (Enabling this option (true) reverses the motor)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the direction (polarity) of the motor.\\n(Enabling this option (true) re" +
            "verses the motor.)")]
        public bool ReversePolarity {
            get {
                return this._ReversePolarity;
            }
            set {
                this._ReversePolarity = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency Milliseconds (0-N, -1 disabled)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds. \n(0 = default; -1 = disabled; > " +
            "0 = ms)")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MotorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._MotorPort = this._MotorPort;
            typedTarget._ReversePolarity = this._ReversePolarity;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones MotorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MotorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._MotorPort)));
            writer.Write(this._ReversePolarity);
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes MotorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MotorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._MotorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort)(reader.ReadInt32()));
            this._ReversePolarity = reader.ReadBoolean();
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Get the LEGO Motor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Motor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Stop Motor
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Stops the NXT Motor by braking or coasting the motor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AllStop : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public AllStop() {
        }
        
        public AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body) : 
                base(body) {
        }
        
        public AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Rotate the LEGO Motor at the specified motor power.
    ///            Optionally stop afer the specified degrees.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Rotates the LEGO Motor at the specified motor power. \nOptionally stop afer the sp" +
        "ecified degrees.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetMotorRotation : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetMotorRotation() {
        }
        
        public SetMotorRotation(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body) : 
                base(body) {
        }
        
        public SetMotorRotation(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Rotate the LEGO Motor at the specified motor power, stopping automatically after the specified duration.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Rotates the LEGO Motor at the specified motor power, stopping automatically after" +
        " the specified duration.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RotateForDuration : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public RotateForDuration() {
        }
        
        public RotateForDuration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body) : 
                base(body) {
        }
        
        public RotateForDuration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Motor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to LEGO NXT Motor notifications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to LEGO NXT Motor and Encoder notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Motor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Motor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MotorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe> {
        
        public MotorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState stopState) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest(stopState);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState stopState, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest(stopState);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetMotorRotation(double targetPower, double stopAfterDegrees, double stopAfterRotations) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest(targetPower, stopAfterDegrees, stopAfterRotations);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetMotorRotation(double targetPower, double stopAfterDegrees, double stopAfterRotations, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest(targetPower, stopAfterDegrees, stopAfterRotations);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetMotorRotation(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetMotorRotation(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotationRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.SetMotorRotation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RotateForDuration(double targetPower, double stopAfterMs) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest(targetPower, stopAfterMs);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RotateForDuration(double targetPower, double stopAfterMs, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest(targetPower, stopAfterMs);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> RotateForDuration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RotateForDuration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDurationRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.RotateForDuration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort motorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig(motorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort motorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig(motorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Motor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Motor and Encoder (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Motor ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MotorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorOperations();
            this.RoboticsCommonMotorOperations = new global::Microsoft.Robotics.Services.Motor.Proxy.MotorOperations();
            this.EncoderOperations = new global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MotorOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/motor.user.html", "MotorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RoboticsCommonMotorOperations, "http://schemas.microsoft.com/robotics/2006/05/motor.html", "RoboticsCommonMotorOperations", "/generic/motor"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.EncoderOperations, "http://schemas.microsoft.com/robotics/2006/05/encoder.html", "EncoderOperations", "/generic/encoder"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.MotorOperations MotorOperations;
        
        public global::Microsoft.Robotics.Services.Motor.Proxy.MotorOperations RoboticsCommonMotorOperations;
        
        public global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderOperations EncoderOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy {
    
    
    /// <summary>
    ///            LEGO NXT Sonar Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html", ElementName="SonarSensorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Ultrasonic Sensor Configuration.")]
    public class SonarSensorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SonarSensorConfig() {
        }
        
        public SonarSensorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Sonar Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Ultrasonic Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SonarSensorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones SonarSensorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SonarSensorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes SonarSensorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SonarSensorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Sonar Sensor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html", ElementName="SonarSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Ultrasonic Sensor state.")]
    public class SonarSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SonarSensorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Sonar Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Ultrasonic Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private int _Distance;
        
        /// <summary>
        ///            The current sonar distance (cm) received from the Sonar Sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current distance (cm) received from the Ultrasonic Sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int Distance {
            get {
                return this._Distance;
            }
            set {
                this._Distance = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SonarSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._Distance = this._Distance;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones SonarSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SonarSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(this._Distance);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes SonarSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SonarSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._Distance = reader.ReadInt32();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Ultrasonic Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Sonar Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Ultrasonic Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Sonar Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the LEGO NXT Ultrasonic Sensor State.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SonarSensorUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SonarSensorUpdate() {
        }
        
        public SonarSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body) : 
                base(body) {
        }
        
        public SonarSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO NXT Sonar Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO NXT Sonar Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UltrasonicSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe> {
        
        public UltrasonicSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SonarSensorUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SonarSensorUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SonarSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SonarSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.SonarSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Ultrasonic Sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Ultrasonic Sensor (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Ultrasonic Sensor ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.UltrasonicSensorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.UltrasonicSensorOperations();
            this.AnalogSensorOperations = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.UltrasonicSensorOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/sonarsensor.user.html", "UltrasonicSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AnalogSensorOperations, "http://schemas.microsoft.com/robotics/2006/06/analogsensor.html", "AnalogSensorOperations", "/analogsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SonarSensor.Proxy.UltrasonicSensorOperations UltrasonicSensorOperations;
        
        public global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations AnalogSensorOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy {
    
    
    /// <summary>
    ///            Request the spotlight to be turned on or off.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", ElementName="SpotlightRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests the spotlight to be turned on or off.")]
    public class SpotlightRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpotlightRequest() {
        }
        
        public SpotlightRequest(bool spotlightOn) {
            this._SpotlightOn = spotlightOn;
        }
        
        private bool _SpotlightOn;
        
        /// <summary>
        ///            The requested state of the spotlight on the LEGO NXT light sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the requested state of the spotlight on the LEGO NXT light sensor.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) IsOn")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool SpotlightOn {
            get {
                return this._SpotlightOn;
            }
            set {
                this._SpotlightOn = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpotlightRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest)(target));
            typedTarget._SpotlightOn = this._SpotlightOn;
        }
        
        /// <summary>
        ///Clones SpotlightRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpotlightRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SpotlightOn);
        }
        
        /// <summary>
        ///Deserializes SpotlightRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpotlightRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SpotlightOn = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Light Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", ElementName="LightSensorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Light Sensor Configuration.")]
    public class LightSensorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LightSensorConfig() {
        }
        
        public LightSensorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private bool _SpotlightOn;
        
        /// <summary>
        ///            Indicates the initial state of the light sensor spotlight
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the initial state of the light sensor spotlight.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) IsOn")]
        public bool SpotlightOn {
            get {
                return this._SpotlightOn;
            }
            set {
                this._SpotlightOn = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Light Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Light Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LightSensorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig)(target));
            typedTarget._SpotlightOn = this._SpotlightOn;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones LightSensorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LightSensorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SpotlightOn);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes LightSensorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LightSensorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SpotlightOn = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Light Sensor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", ElementName="LightSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Light Sensor state.")]
    public class LightSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LightSensorState() {
        }
        
        private bool _SpotlightOn;
        
        /// <summary>
        ///            Indicates the current state of the light sensor spotlight
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current state of the light sensor spotlight.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) IsOn")]
        public bool SpotlightOn {
            get {
                return this._SpotlightOn;
            }
            set {
                this._SpotlightOn = value;
            }
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Light Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Light Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private int _Intensity;
        
        /// <summary>
        ///            The intensity of the current light reading
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the intensity of the current light reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int Intensity {
            get {
                return this._Intensity;
            }
            set {
                this._Intensity = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LightSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState)(target));
            typedTarget._SpotlightOn = this._SpotlightOn;
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._Intensity = this._Intensity;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones LightSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LightSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SpotlightOn);
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(this._Intensity);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes LightSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LightSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SpotlightOn = reader.ReadBoolean();
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._Intensity = reader.ReadInt32();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Turn the LEGO LightSensor spotlight on or off.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SpotlightUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Turns the LEGO LightSensor spotlight on or off (or indicates that the spotlight h" +
        "as been turned on or off).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Spotlight : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public Spotlight() {
        }
        
        public Spotlight(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body) : 
                base(body) {
        }
        
        public Spotlight(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Light Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Light Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Light Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to LEGO NXT Light Sensor notifications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to LEGO NXT Light Sensor notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace the LEGO Light Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Replaces the current state of the LEGO NXT Light Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO NXT Light Sensor Operations
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO NXT Light Sensor Operations")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LightSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace> {
        
        public LightSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Spotlight(bool spotlightOn) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest(spotlightOn);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Spotlight(bool spotlightOn, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest(spotlightOn);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Spotlight(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Spotlight(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.SpotlightRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Spotlight(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Light Sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Light Sensor (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Light Sensor ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.LightSensorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorOperations();
            this.AnalogSensorOperations = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.LightSensorOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/lightsensor.user.html", "LightSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AnalogSensorOperations, "http://schemas.microsoft.com/robotics/2006/06/analogsensor.html", "AnalogSensorOperations", "/analogsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.LightSensor.Proxy.LightSensorOperations LightSensorOperations;
        
        public global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations AnalogSensorOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy {
    
    
    /// <summary>
    ///            Configures the minimum and maximum Contact Sensor range for any LEGO NXT device which implements the Generice Analog Sensor contract.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="NxtContactSensorArrayState")]
    [global::System.ComponentModel.DescriptionAttribute("Configures the minimum and maximum Contact Sensor range for any LEGO NXT device w" +
        "hich implements the Generice Analog Sensor contract.")]
    public class NxtContactSensorArrayState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtContactSensorArrayState() {
        }
        
        public NxtContactSensorArrayState(global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration> sensorConfiguration) {
            this._SensorConfiguration = sensorConfiguration;
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration> _SensorConfiguration;
        
        /// <summary>
        ///            Configures the minimum and maximum Contact Sensor range for any LEGO NXT device which implements the Generice Analog Sensor contract.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Configures the minimum and maximum Contact Sensor range for any LEGO NXT device w" +
            "hich implements the Generice Analog Sensor contract.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration> SensorConfiguration {
            get {
                return this._SensorConfiguration;
            }
            set {
                this._SensorConfiguration = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration> _RuntimeConfiguration;
        
        /// <summary>
        ///            Indicates the Runtime configuration of the Contact Sensor Array.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Runtime configuration of the Contact Sensor Array.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration> RuntimeConfiguration {
            get {
                return this._RuntimeConfiguration;
            }
            set {
                this._RuntimeConfiguration = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtContactSensorArrayState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState)(target));
            if ((this._SensorConfiguration != null)) {
                int count = this._SensorConfiguration.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration tmp0 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration);
                    if ((this._SensorConfiguration[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration tmp1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SensorConfiguration[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._SensorConfiguration = tmp;
            }
            if ((this._RuntimeConfiguration != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration> tmp2 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeConfiguration)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._RuntimeConfiguration = tmp2;
            }
        }
        
        /// <summary>
        ///Clones NxtContactSensorArrayState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtContactSensorArrayState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._SensorConfiguration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SensorConfiguration.Count);
                for (int indexSensorConfiguration = 0; (indexSensorConfiguration < this._SensorConfiguration.Count); indexSensorConfiguration = (indexSensorConfiguration + 1)) {
                    if ((this._SensorConfiguration[indexSensorConfiguration] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SensorConfiguration[indexSensorConfiguration])).Serialize(writer);
                    }
                }
            }
            if ((this._RuntimeConfiguration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeConfiguration)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes NxtContactSensorArrayState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtContactSensorArrayState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._SensorConfiguration = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._SensorConfiguration.Add(default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration));
                    if ((reader.ReadByte() != 0)) {
                        this._SensorConfiguration[index0] = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._RuntimeConfiguration = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration>())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Configures the minimum and maximum values of an analog sensor to translate the
    ///            analog value to ContactSensor.Pressed.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="SensorConfiguration")]
    [global::System.ComponentModel.DescriptionAttribute("Configures the minimum and maximum values of an analog sensor to translate the an" +
        "alog value to ContactSensor.Pressed.")]
    public class SensorConfiguration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SensorConfiguration() {
        }
        
        public SensorConfiguration(string rangeName, string deviceModel, string deviceName, double successRangeMin, double successRangeMax) {
            this._RangeName = rangeName;
            this._DeviceModel = deviceModel;
            this._DeviceName = deviceName;
            this._SuccessRangeMin = successRangeMin;
            this._SuccessRangeMax = successRangeMax;
        }
        
        private string _RangeName;
        
        /// <summary>
        ///            Specifies the user friendly range name.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the user friendly range name.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string RangeName {
            get {
                return this._RangeName;
            }
            set {
                this._RangeName = value;
            }
        }
        
        private string _DeviceModel;
        
        /// <summary>
        ///            Identifies the device model for which this range applies.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the device model for which this range applies (Required).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string DeviceModel {
            get {
                return this._DeviceModel;
            }
            set {
                this._DeviceModel = value;
            }
        }
        
        private string _DeviceName;
        
        /// <summary>
        ///            Optionally Identifies the user friendly device name to which this range applies.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Optionally Identifies the user friendly device name to which this range applies.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string DeviceName {
            get {
                return this._DeviceName;
            }
            set {
                this._DeviceName = value;
            }
        }
        
        private double _SuccessRangeMin;
        
        /// <summary>
        ///            Specifies the minimum value of the success range for this type of sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the minimum value of the success range for this type of sensor.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public double SuccessRangeMin {
            get {
                return this._SuccessRangeMin;
            }
            set {
                this._SuccessRangeMin = value;
            }
        }
        
        private double _SuccessRangeMax;
        
        /// <summary>
        ///            Specifies the maximum value of the success range for this type of sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maximum value of the success range for this type of sensor.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=5)]
        public double SuccessRangeMax {
            get {
                return this._SuccessRangeMax;
            }
            set {
                this._SuccessRangeMax = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SensorConfiguration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration)(target));
            typedTarget._RangeName = this._RangeName;
            typedTarget._DeviceModel = this._DeviceModel;
            typedTarget._DeviceName = this._DeviceName;
            typedTarget._SuccessRangeMin = this._SuccessRangeMin;
            typedTarget._SuccessRangeMax = this._SuccessRangeMax;
        }
        
        /// <summary>
        ///Clones SensorConfiguration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SensorConfiguration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._RangeName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RangeName);
            }
            if ((this._DeviceModel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DeviceModel);
            }
            if ((this._DeviceName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DeviceName);
            }
            writer.Write(this._SuccessRangeMin);
            writer.Write(this._SuccessRangeMax);
        }
        
        /// <summary>
        ///Deserializes SensorConfiguration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SensorConfiguration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._RangeName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DeviceModel = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DeviceName = reader.ReadString();
            }
            this._SuccessRangeMin = reader.ReadDouble();
            this._SuccessRangeMax = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies a Sensor Range on the specified Sensor Port.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="SensorRange")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies a Sensor Range on the specified Sensor Port.")]
    public class SensorRange : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SensorRange() {
        }
        
        public SensorRange(int hardwareIdentifier, string model, string sensorName, string rangeName) {
            this._HardwareIdentifier = hardwareIdentifier;
            this._Model = model;
            this._SensorName = sensorName;
            this._RangeName = rangeName;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            Identifies the Sensor Port.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _HardwareIdentifier;
        
        /// <summary>
        ///            Identifies the Contact Sensor Hardware Identifier.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Contact Sensor Hardware Identifier.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int HardwareIdentifier {
            get {
                return this._HardwareIdentifier;
            }
            set {
                this._HardwareIdentifier = value;
            }
        }
        
        private string _Model;
        
        /// <summary>
        ///            Identifies the NXT Sensor Model.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the NXT Sensor Model.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Model {
            get {
                return this._Model;
            }
            set {
                this._Model = value;
            }
        }
        
        private string _SensorName;
        
        /// <summary>
        ///            Identifies the NXT Sensor Name.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the NXT Sensor Name.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string SensorName {
            get {
                return this._SensorName;
            }
            set {
                this._SensorName = value;
            }
        }
        
        private string _RangeName;
        
        /// <summary>
        ///            Identifies the name of this Sensor Range.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the name of this Sensor Range.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public string RangeName {
            get {
                return this._RangeName;
            }
            set {
                this._RangeName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SensorRange to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange)(target));
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._HardwareIdentifier = this._HardwareIdentifier;
            typedTarget._Model = this._Model;
            typedTarget._SensorName = this._SensorName;
            typedTarget._RangeName = this._RangeName;
        }
        
        /// <summary>
        ///Clones SensorRange
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorRange();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SensorRange to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._HardwareIdentifier);
            if ((this._Model == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Model);
            }
            if ((this._SensorName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SensorName);
            }
            if ((this._RangeName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RangeName);
            }
        }
        
        /// <summary>
        ///Deserializes SensorRange
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SensorRange</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._HardwareIdentifier = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Model = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._SensorName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._RangeName = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Runtime configuration of the ContactSensorArray.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="PortConfiguration")]
    [global::System.ComponentModel.DescriptionAttribute("Runtime configuration of the ContactSensorArray.")]
    public class PortConfiguration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PortConfiguration() {
        }
        
        private int _HardwareIdentifier;
        
        /// <summary>
        ///            Indicates the Hardware Identifier.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Hardware Identifier (1-4).")]
        public int HardwareIdentifier {
            get {
                return this._HardwareIdentifier;
            }
            set {
                this._HardwareIdentifier = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            Indicates the Sensor Name.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Sensor Name.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private double _SuccessRangeMin;
        
        /// <summary>
        ///            Specifies the minimum value of the success range for this type of sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the minimum value of the success range for this type of sensor.")]
        public double SuccessRangeMin {
            get {
                return this._SuccessRangeMin;
            }
            set {
                this._SuccessRangeMin = value;
            }
        }
        
        private double _SuccessRangeMax;
        
        /// <summary>
        ///            Specifies the maximum value of the success range for this type of sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maximum value of the success range for this type of sensor.")]
        public double SuccessRangeMax {
            get {
                return this._SuccessRangeMax;
            }
            set {
                this._SuccessRangeMax = value;
            }
        }
        
        private string _AnalogSensorServiceUri;
        
        /// <summary>
        ///            "Specifies the Service URI of the analog sensor service for this sensor."
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Service URI of the analog sensor service for this sensor.")]
        public string AnalogSensorServiceUri {
            get {
                return this._AnalogSensorServiceUri;
            }
            set {
                this._AnalogSensorServiceUri = value;
            }
        }
        
        private bool _Contact;
        
        /// <summary>
        ///            Indicates the current state of the Contact Sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current state of the Contact Sensor.")]
        public bool Contact {
            get {
                return this._Contact;
            }
            set {
                this._Contact = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PortConfiguration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration)(target));
            typedTarget._HardwareIdentifier = this._HardwareIdentifier;
            typedTarget._Name = this._Name;
            typedTarget._SuccessRangeMin = this._SuccessRangeMin;
            typedTarget._SuccessRangeMax = this._SuccessRangeMax;
            typedTarget._AnalogSensorServiceUri = this._AnalogSensorServiceUri;
            typedTarget._Contact = this._Contact;
        }
        
        /// <summary>
        ///Clones PortConfiguration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.PortConfiguration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PortConfiguration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._HardwareIdentifier);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(this._SuccessRangeMin);
            writer.Write(this._SuccessRangeMax);
            if ((this._AnalogSensorServiceUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._AnalogSensorServiceUri);
            }
            writer.Write(this._Contact);
        }
        
        /// <summary>
        ///Deserializes PortConfiguration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PortConfiguration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._HardwareIdentifier = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SuccessRangeMin = reader.ReadDouble();
            this._SuccessRangeMax = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._AnalogSensorServiceUri = reader.ReadString();
            }
            this._Contact = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Resets the configuration of the LEGO NXT Contact Sensor Array.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="ResetConfigurationRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Resets the configuration of the LEGO NXT Contact Sensor Array.")]
    public class ResetConfigurationRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ResetConfigurationRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ResetConfigurationRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest)(target));
        }
        
        /// <summary>
        ///Clones ResetConfigurationRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ResetConfigurationRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ResetConfigurationRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ResetConfigurationRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            NxtContactSensorArray Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Returns the configuration state for the LEGO NXT Contact Sensor Array.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configures a LEGO NXT Device to be interpreted as a Contact Sensor.
    ///            The specified Device must implement the Generic Analog Sensor contract 
    ///            in order to be used by the Contact Sensor Array service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Configures LEGO NXT Devices which implement the Generic Analog Sensor contract to" +
        " be interpreted as Contact Sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConfigureDevice : global::Microsoft.Dss.ServiceModel.Dssp.Upsert<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault>> {
        
        public ConfigureDevice() {
        }
        
        public ConfigureDevice(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body) : 
                base(body) {
        }
        
        public ConfigureDevice(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Resets the configuration of the LEGO NXT Contact Sensor Array.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Resets the configuration of the LEGO NXT Contact Sensor Array.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ResetConfiguration : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault>> {
        
        public ResetConfiguration() {
        }
        
        public ResetConfiguration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body) : 
                base(body) {
        }
        
        public ResetConfiguration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            NxtContactSensorArray Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("NxtContactSensorArray Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NxtContactSensorArrayOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration> {
        
        public NxtContactSensorArrayOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> ConfigureDevice(string rangeName, string deviceModel, string deviceName, double successRangeMin, double successRangeMax) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration(rangeName, deviceModel, deviceName, successRangeMin, successRangeMax);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConfigureDevice(string rangeName, string deviceModel, string deviceName, double successRangeMin, double successRangeMax, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration(rangeName, deviceModel, deviceName, successRangeMin, successRangeMax);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> ConfigureDevice(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConfigureDevice(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.SensorConfiguration();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ConfigureDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> ResetConfiguration() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ResetConfiguration(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> ResetConfiguration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ResetConfiguration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfigurationRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.ResetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Standard NXT Devices which support the generic Analog Sensor contract.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", ElementName="StandardNxtDevices")]
    [global::System.ComponentModel.DescriptionAttribute("Standard NXT Devices which support the generic Analog Sensor contract.")]
    public enum StandardNxtDevices : int {
        
        /// <summary>
        ///            The Device Model of the LEGO NXT Touch Sensor.
        ///            </summary>
        TouchSensor = 0,
        
        /// <summary>
        ///            The Device Model of the LEGO NXT Light Sensor.
        ///            </summary>
        LightSensor = 1,
        
        /// <summary>
        ///            The Device Model of the LEGO NXT Sound Sensor.
        ///            </summary>
        SoundSensor = 2,
        
        /// <summary>
        ///            The Device Model of the LEGO NXT Ultrasonic Sensor.
        ///            </summary>
        UltrasonicSensor = 3,
        
        /// <summary>
        ///            The Device Model of the HiTechnic Compass Sensor.
        ///            </summary>
        Compass = 4,
        
        /// <summary>
        ///            The Device Model of the MindSensors Compass Sensor.
        ///            </summary>
        CMPS = 5,
    }
    
    /// <summary>
    ///            Contact Sensor Array Service
    ///            Aggregates up to four LEGO NXT sensors to produce a Contact Sensor Array.
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Aggregates up to four LEGO NXT sensors to produce a Contact Sensor Array.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Contact Sensor Array ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.NxtContactSensorArrayOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayOperations();
            this.ContactSensorArrayOperations = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.NxtContactSensorArrayOperations, "http://schemas.microsoft.com/robotics/2007/10/contactsensorarray.user.html", "NxtContactSensorArrayOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ContactSensorArrayOperations, "http://schemas.microsoft.com/2006/06/contactsensor.html", "ContactSensorArrayOperations", "/generic"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ContactSensorArray.Proxy.NxtContactSensorArrayOperations NxtContactSensorArrayOperations;
        
        public global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations ContactSensorArrayOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy {
    
    
    /// <summary>
    ///            LEGO NXT Drive State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", ElementName="DriveState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the Drive state which controls two motors in synchronization.")]
    public class DriveState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Drive connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private double _DistanceBetweenWheels;
        
        /// <summary>
        ///            Indicates the distance between the drive wheels (meters).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the distance between the drive wheels in meters. \n(Example: 11.3cm = 0." +
            "113)")]
        public double DistanceBetweenWheels {
            get {
                return this._DistanceBetweenWheels;
            }
            set {
                this._DistanceBetweenWheels = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration _LeftWheel;
        
        /// <summary>
        ///            Left Wheel Configuration
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Left Wheel Configuration.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration LeftWheel {
            get {
                return this._LeftWheel;
            }
            set {
                this._LeftWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration _RightWheel;
        
        /// <summary>
        ///            Right Wheel Configuration
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Right Wheel Configuration.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration RightWheel {
            get {
                return this._RightWheel;
            }
            set {
                this._RightWheel = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency Milliseconds (0-N, -1 disabled)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds. \n(0 = default; -1 = disabled; > " +
            "0 = ms)")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Indicates the timestamp of the last state change.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1, XmlOmitDefaultValue=true)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last encoder readings.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.ComponentModel.DefaultValueAttribute(typeof(global::System.DateTime), "0001-01-01T00:00:00")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics _RuntimeStatistics;
        
        /// <summary>
        ///            Indicates the runtime statistics of entire drive.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the runtime statistics of entire drive (power, encoders, rpms).")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics RuntimeStatistics {
            get {
                return this._RuntimeStatistics;
            }
            set {
                this._RuntimeStatistics = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._DistanceBetweenWheels = this._DistanceBetweenWheels;
            if ((this._LeftWheel != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._LeftWheel = tmp;
            }
            if ((this._RightWheel != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._RightWheel = tmp0;
            }
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._RuntimeStatistics != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics tmp1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeStatistics)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._RuntimeStatistics = tmp1;
            }
        }
        
        /// <summary>
        ///Clones DriveState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            writer.Write(this._DistanceBetweenWheels);
            if ((this._LeftWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftWheel)).Serialize(writer);
            }
            if ((this._RightWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightWheel)).Serialize(writer);
            }
            writer.Write(this._PollingFrequencyMs);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._RuntimeStatistics == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RuntimeStatistics)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes DriveState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            this._DistanceBetweenWheels = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._LeftWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RightWheel = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration())).Deserialize(reader)));
            }
            this._PollingFrequencyMs = reader.ReadInt32();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._RuntimeStatistics = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Wheel Configuration
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", ElementName="WheelConfiguration")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Wheel Configuration.")]
    public class WheelConfiguration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public WheelConfiguration() {
        }
        
        public WheelConfiguration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort motorPort, bool reversePolarity, double wheelDiameter) {
            this._MotorPort = motorPort;
            this._ReversePolarity = reversePolarity;
            this._WheelDiameter = wheelDiameter;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort _MotorPort;
        
        /// <summary>
        ///            Motor Port Configuration
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Motor Port Configuration.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort MotorPort {
            get {
                return this._MotorPort;
            }
            set {
                this._MotorPort = value;
            }
        }
        
        private bool _ReversePolarity;
        
        /// <summary>
        ///            Reverse Motor Polarity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the direction (polarity) of the motor.\n(Enabling this option (true) rev" +
            "erses the motor.)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool ReversePolarity {
            get {
                return this._ReversePolarity;
            }
            set {
                this._ReversePolarity = value;
            }
        }
        
        private double _WheelDiameter;
        
        /// <summary>
        ///            Diameter of the wheel (meters)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the diameter of the wheel in meters \n(Example 5.2cm = 0.052)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public double WheelDiameter {
            get {
                return this._WheelDiameter;
            }
            set {
                this._WheelDiameter = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current WheelConfiguration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration)(target));
            typedTarget._MotorPort = this._MotorPort;
            typedTarget._ReversePolarity = this._ReversePolarity;
            typedTarget._WheelDiameter = this._WheelDiameter;
        }
        
        /// <summary>
        ///Clones WheelConfiguration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.WheelConfiguration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current WheelConfiguration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._MotorPort)));
            writer.Write(this._ReversePolarity);
            writer.Write(this._WheelDiameter);
        }
        
        /// <summary>
        ///Deserializes WheelConfiguration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized WheelConfiguration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._MotorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtMotorPort)(reader.ReadInt32()));
            this._ReversePolarity = reader.ReadBoolean();
            this._WheelDiameter = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO Drive Runtime Statistics
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", ElementName="RuntimeStatistics")]
    [global::System.ComponentModel.DescriptionAttribute("Provides Runtime statistics for the LEGO NXT Drive.")]
    public class RuntimeStatistics : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RuntimeStatistics() {
        }
        
        private double _LeftPowerCurrent;
        
        /// <summary>
        ///            Indicates the Left motor power; range is -1.0 to 1.0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current power of the Left Motor. \n(range is -1.0 to 1.0)")]
        public double LeftPowerCurrent {
            get {
                return this._LeftPowerCurrent;
            }
            set {
                this._LeftPowerCurrent = value;
            }
        }
        
        private double _LeftPowerTarget;
        
        /// <summary>
        ///            Indicates the Left motor target power; range is -1.0 to 1.0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the desired Target Power of the Left motor. \n(range is -1.0 to 1.0)")]
        public double LeftPowerTarget {
            get {
                return this._LeftPowerTarget;
            }
            set {
                this._LeftPowerTarget = value;
            }
        }
        
        private global::System.DateTime _LeftEncoderTimeStamp;
        
        /// <summary>
        ///            Left Encoder TimeStamp.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the Left Encoder reading.")]
        public global::System.DateTime LeftEncoderTimeStamp {
            get {
                return this._LeftEncoderTimeStamp;
            }
            set {
                this._LeftEncoderTimeStamp = value;
            }
        }
        
        private long _LeftEncoderCurrent;
        
        /// <summary>
        ///            Left Motor Encoder.  Current reading in degrees.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current reading of the Left Motor Encoder in degrees.")]
        public long LeftEncoderCurrent {
            get {
                return this._LeftEncoderCurrent;
            }
            set {
                this._LeftEncoderCurrent = value;
            }
        }
        
        private long _LeftEncoderTarget;
        
        /// <summary>
        ///            Left Motor Encoder Target.  Desired target of the Left encoder in degrees.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Desired Target of the Left Motor Encoder in degrees.")]
        public long LeftEncoderTarget {
            get {
                return this._LeftEncoderTarget;
            }
            set {
                this._LeftEncoderTarget = value;
            }
        }
        
        private int _LeftMotorRpm;
        
        /// <summary>
        ///            The Left Motor Speed (RPM).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Left Motor Speed (RPM).")]
        public int LeftMotorRpm {
            get {
                return this._LeftMotorRpm;
            }
            set {
                this._LeftMotorRpm = value;
            }
        }
        
        private double _RightPowerCurrent;
        
        /// <summary>
        ///            Indicates the Right motor power; range is -1.0 to 1.0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current power of the Right Motor. \n(range is -1.0 to 1.0)")]
        public double RightPowerCurrent {
            get {
                return this._RightPowerCurrent;
            }
            set {
                this._RightPowerCurrent = value;
            }
        }
        
        private double _RightPowerTarget;
        
        /// <summary>
        ///            Indicates the Right motor target power; range is -1.0 to 1.0.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the desired Target Power of the Right motor. \n(range is -1.0 to 1.0)")]
        public double RightPowerTarget {
            get {
                return this._RightPowerTarget;
            }
            set {
                this._RightPowerTarget = value;
            }
        }
        
        private global::System.DateTime _RightEncoderTimeStamp;
        
        /// <summary>
        ///            Right Encoder TimeStamp.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the Right Encoder reading.")]
        public global::System.DateTime RightEncoderTimeStamp {
            get {
                return this._RightEncoderTimeStamp;
            }
            set {
                this._RightEncoderTimeStamp = value;
            }
        }
        
        private long _RightEncoderCurrent;
        
        /// <summary>
        ///            Right Motor Encoder.  Current reading in degrees.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current reading of the Right Motor Encoder in degrees.")]
        public long RightEncoderCurrent {
            get {
                return this._RightEncoderCurrent;
            }
            set {
                this._RightEncoderCurrent = value;
            }
        }
        
        private long _RightEncoderTarget;
        
        /// <summary>
        ///            Right Motor Encoder Target.  Desired target of the Right encoder in degrees.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Desired Target of the Right Motor Encoder in degrees.")]
        public long RightEncoderTarget {
            get {
                return this._RightEncoderTarget;
            }
            set {
                this._RightEncoderTarget = value;
            }
        }
        
        private int _RightMotorRpm;
        
        /// <summary>
        ///            The Right Motor Speed (RPM).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Right Motor Speed (RPM).")]
        public int RightMotorRpm {
            get {
                return this._RightMotorRpm;
            }
            set {
                this._RightMotorRpm = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _TargetStopState;
        
        /// <summary>
        ///            Specifies how to stop after the Target Encoder degrees are reached.
        ///            Valid when Stopping after a specified number of rotation degrees.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies how to stop after the Target Encoder degrees are reached. \nValid when S" +
            "topping after a specified number of rotation degrees.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState TargetStopState {
            get {
                return this._TargetStopState;
            }
            set {
                this._TargetStopState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RuntimeStatistics to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics)(target));
            typedTarget._LeftPowerCurrent = this._LeftPowerCurrent;
            typedTarget._LeftPowerTarget = this._LeftPowerTarget;
            typedTarget._LeftEncoderTimeStamp = this._LeftEncoderTimeStamp;
            typedTarget._LeftEncoderCurrent = this._LeftEncoderCurrent;
            typedTarget._LeftEncoderTarget = this._LeftEncoderTarget;
            typedTarget._LeftMotorRpm = this._LeftMotorRpm;
            typedTarget._RightPowerCurrent = this._RightPowerCurrent;
            typedTarget._RightPowerTarget = this._RightPowerTarget;
            typedTarget._RightEncoderTimeStamp = this._RightEncoderTimeStamp;
            typedTarget._RightEncoderCurrent = this._RightEncoderCurrent;
            typedTarget._RightEncoderTarget = this._RightEncoderTarget;
            typedTarget._RightMotorRpm = this._RightMotorRpm;
            typedTarget._TargetStopState = this._TargetStopState;
        }
        
        /// <summary>
        ///Clones RuntimeStatistics
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RuntimeStatistics to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._LeftPowerCurrent);
            writer.Write(this._LeftPowerTarget);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LeftEncoderTimeStamp, writer);
            writer.Write(this._LeftEncoderCurrent);
            writer.Write(this._LeftEncoderTarget);
            writer.Write(this._LeftMotorRpm);
            writer.Write(this._RightPowerCurrent);
            writer.Write(this._RightPowerTarget);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._RightEncoderTimeStamp, writer);
            writer.Write(this._RightEncoderCurrent);
            writer.Write(this._RightEncoderTarget);
            writer.Write(this._RightMotorRpm);
            writer.Write(((int)(this._TargetStopState)));
        }
        
        /// <summary>
        ///Deserializes RuntimeStatistics
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RuntimeStatistics</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LeftPowerCurrent = reader.ReadDouble();
            this._LeftPowerTarget = reader.ReadDouble();
            this._LeftEncoderTimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._LeftEncoderCurrent = reader.ReadInt64();
            this._LeftEncoderTarget = reader.ReadInt64();
            this._LeftMotorRpm = reader.ReadInt32();
            this._RightPowerCurrent = reader.ReadDouble();
            this._RightPowerTarget = reader.ReadDouble();
            this._RightEncoderTimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._RightEncoderCurrent = reader.ReadInt64();
            this._RightEncoderTarget = reader.ReadInt64();
            this._RightMotorRpm = reader.ReadInt32();
            this._TargetStopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT specific drive request which stops after the specified motor rotation degrees.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", ElementName="SetDriveRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a LEGO NXT specific drive request which stops after the specified motor" +
        " rotation degrees.")]
    public class SetDriveRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetDriveRequest() {
        }
        
        public SetDriveRequest(double leftPower, double rightPower, long leftStopAtRotationDegrees) {
            this._LeftPower = leftPower;
            this._RightPower = rightPower;
            this._LeftStopAtRotationDegrees = leftStopAtRotationDegrees;
        }
        
        private double _LeftPower;
        
        /// <summary>
        ///            Left Motor Power (-1.0 - 1.0)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Left Motor Power (-1.0 - 1.0)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double LeftPower {
            get {
                return this._LeftPower;
            }
            set {
                this._LeftPower = value;
            }
        }
        
        private double _RightPower;
        
        /// <summary>
        ///            Right Motor Power (-1.0 - 1.0)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Right Motor Power (-1.0 - 1.0)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public double RightPower {
            get {
                return this._RightPower;
            }
            set {
                this._RightPower = value;
            }
        }
        
        private long _LeftStopAtRotationDegrees;
        
        /// <summary>
        ///            Stop the Left Motor after it has rotated the specified degrees (0-continuous).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops the Left Motor after it has rotated the specified degrees (0-continuous).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public long LeftStopAtRotationDegrees {
            get {
                return this._LeftStopAtRotationDegrees;
            }
            set {
                this._LeftStopAtRotationDegrees = value;
            }
        }
        
        private long _RightStopAtRotationDegrees;
        
        /// <summary>
        ///            Stop the Right Motor after it has rotated the specified degrees (0-continuous).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops the Right Motor after it has rotated the specified degrees (0-continuous).")]
        public long RightStopAtRotationDegrees {
            get {
                return this._RightStopAtRotationDegrees;
            }
            set {
                this._RightStopAtRotationDegrees = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState _StopState;
        
        /// <summary>
        ///            Stop by applying brakes or coasting. \nValid when Stopping after the specified Rotation Degrees
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Stops by applying brakes or coasting. \nValid when Stopping after the specified Ro" +
            "tation Degrees.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState StopState {
            get {
                return this._StopState;
            }
            set {
                this._StopState = value;
            }
        }
        
        private bool _isGenericOperation;
        
        /// <summary>
        ///            This request orignated from a generic operation
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Request originated from a generic operation.")]
        public bool isGenericOperation {
            get {
                return this._isGenericOperation;
            }
            set {
                this._isGenericOperation = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage _DriveDistanceStage;
        
        /// <summary>
        ///            DriveDistance stage
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Drive distance stage.")]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage DriveDistanceStage {
            get {
                return this._DriveDistanceStage;
            }
            set {
                this._DriveDistanceStage = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage _RotateDegreesStage;
        
        /// <summary>
        ///            RotageDegrees stage
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Rotate degrees stage.")]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage RotateDegreesStage {
            get {
                return this._RotateDegreesStage;
            }
            set {
                this._RotateDegreesStage = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveRequestOperation _DriveRequestOperation;
        
        /// <summary>
        ///            Drive request;
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Drive request.")]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveRequestOperation DriveRequestOperation {
            get {
                return this._DriveRequestOperation;
            }
            set {
                this._DriveRequestOperation = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetDriveRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest)(target));
            typedTarget._LeftPower = this._LeftPower;
            typedTarget._RightPower = this._RightPower;
            typedTarget._LeftStopAtRotationDegrees = this._LeftStopAtRotationDegrees;
            typedTarget._RightStopAtRotationDegrees = this._RightStopAtRotationDegrees;
            typedTarget._StopState = this._StopState;
            typedTarget._isGenericOperation = this._isGenericOperation;
            typedTarget._DriveDistanceStage = this._DriveDistanceStage;
            typedTarget._RotateDegreesStage = this._RotateDegreesStage;
            typedTarget._DriveRequestOperation = this._DriveRequestOperation;
        }
        
        /// <summary>
        ///Clones SetDriveRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetDriveRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._LeftPower);
            writer.Write(this._RightPower);
            writer.Write(this._LeftStopAtRotationDegrees);
            writer.Write(this._RightStopAtRotationDegrees);
            writer.Write(((int)(this._StopState)));
            writer.Write(this._isGenericOperation);
            writer.Write(((int)(this._DriveDistanceStage)));
            writer.Write(((int)(this._RotateDegreesStage)));
            writer.Write(((int)(this._DriveRequestOperation)));
        }
        
        /// <summary>
        ///Deserializes SetDriveRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetDriveRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LeftPower = reader.ReadDouble();
            this._RightPower = reader.ReadDouble();
            this._LeftStopAtRotationDegrees = reader.ReadInt64();
            this._RightStopAtRotationDegrees = reader.ReadInt64();
            this._StopState = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState)(reader.ReadInt32()));
            this._isGenericOperation = reader.ReadBoolean();
            this._DriveDistanceStage = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage)(reader.ReadInt32()));
            this._RotateDegreesStage = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage)(reader.ReadInt32()));
            this._DriveRequestOperation = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveRequestOperation)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Reset the Motor Encoder Position
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", ElementName="ResetMotorPositionRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Resets the Motor Encoder Position.")]
    public class ResetMotorPositionRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ResetMotorPositionRequest() {
        }
        
        private bool _Relative;
        
        /// <summary>
        ///            Relative to last position (true) or Absolute (false)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies that the motor is to be reset Relative to last position (true).")]
        public bool Relative {
            get {
                return this._Relative;
            }
            set {
                this._Relative = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ResetMotorPositionRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest)(target));
            typedTarget._Relative = this._Relative;
        }
        
        /// <summary>
        ///Clones ResetMotorPositionRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ResetMotorPositionRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ResetMotorPositionRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Relative);
        }
        
        /// <summary>
        ///Deserializes ResetMotorPositionRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ResetMotorPositionRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Relative = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Get the LEGO Motor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Drive.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Run Motor
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Runs the LEGO Drive at the specified left and right motor power.\nOptionally stop " +
        "afer specified degrees.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DriveDistance : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DriveDistance() {
        }
        
        public DriveDistance(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body) : 
                base(body) {
        }
        
        public DriveDistance(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure Drive Connection
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Drive to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates an update to the Left and Right Wheel encoders.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the Left and Right Wheel encoders.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DriveEncodersUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DriveEncodersUpdate() {
        }
        
        public DriveEncodersUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body) : 
                base(body) {
        }
        
        public DriveEncodersUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to LEGO NXT Drive notifications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to LEGO NXT Drive notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO NXT Drive Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO NXT Drive Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DriveOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe> {
        
        public DriveOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState stopState) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest(stopState);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.MotorStopState stopState, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest(stopState);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AllStop(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStopRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Motor.Proxy.AllStop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveDistance(double leftPower, double rightPower, long leftStopAtRotationDegrees) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest(leftPower, rightPower, leftStopAtRotationDegrees);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveDistance(double leftPower, double rightPower, long leftStopAtRotationDegrees, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest(leftPower, rightPower, leftStopAtRotationDegrees);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveDistance(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveDistance(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.SetDriveRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveEncodersUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveEncodersUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveEncodersUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveEncodersUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.RuntimeStatistics();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveEncodersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Drive Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Drive (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Drive ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DriveOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveOperations();
            this.RoboticsCommonDriveOperations = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DriveOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/drive.user.html", "DriveOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RoboticsCommonDriveOperations, "http://schemas.microsoft.com/robotics/2006/05/drive.html", "RoboticsCommonDriveOperations", "/generic"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Drive.Proxy.DriveOperations DriveOperations;
        
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations RoboticsCommonDriveOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy {
    
    
    /// <summary>
    ///            Request the Color Sensor to change Mode.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", ElementName="ModeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests the Color Sensor to change Modes.")]
    public class ModeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ModeRequest() {
        }
        
        public ModeRequest(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode mode) {
            this._Mode = mode;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode _Mode;
        
        /// <summary>
        ///            The requested Mode of the LEGO NXT Color sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the requested Mode of the LEGO NXT Color sensor.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Mode")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode Mode {
            get {
                return this._Mode;
            }
            set {
                this._Mode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ModeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest)(target));
            typedTarget._Mode = this._Mode;
        }
        
        /// <summary>
        ///Clones ModeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ModeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Mode)));
        }
        
        /// <summary>
        ///Deserializes ModeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ModeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Mode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Color Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", ElementName="ColorSensorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Color Sensor Configuration.")]
    public class ColorSensorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorSensorConfig() {
        }
        
        public ColorSensorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Color Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Color Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = use default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode _SensorMode;
        
        /// <summary>
        ///            The Mode that the sensor is in
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the mode for the Color Sensor (See ColorSensorMode enum).")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode SensorMode {
            get {
                return this._SensorMode;
            }
            set {
                this._SensorMode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorSensorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._SensorMode = this._SensorMode;
        }
        
        /// <summary>
        ///Clones ColorSensorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorSensorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(((int)(this._SensorMode)));
        }
        
        /// <summary>
        ///Deserializes ColorSensorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorSensorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Color Sensor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", ElementName="ColorSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Color Sensor state.")]
    public class ColorSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorSensorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Color Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Color Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Frequency in milliseconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode _SensorMode;
        
        /// <summary>
        ///            The Mode that the sensor is in (See ColorSensorMode enum)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Mode for the Color Sensor (See ColorSensorMode enum).")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode SensorMode {
            get {
                return this._SensorMode;
            }
            set {
                this._SensorMode = value;
            }
        }
        
        private int _Reading;
        
        /// <summary>
        ///            The current light reading (intensity 0-1023) or Color Number (1-6) in Color mode
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current light reading (intensity 0-1023) or Color Number (1-6) in C" +
            "olor mode.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int Reading {
            get {
                return this._Reading;
            }
            set {
                this._Reading = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._SensorMode = this._SensorMode;
            typedTarget._Reading = this._Reading;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones ColorSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(((int)(this._SensorMode)));
            writer.Write(this._Reading);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes ColorSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._SensorMode = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode)(reader.ReadInt32()));
            this._Reading = reader.ReadInt32();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Set the LEGO Color Sensor Mode.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ModeUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Set the LEGO Color Sensor Mode. (Also used in notifications).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetMode() {
        }
        
        public SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body) : 
                base(body) {
        }
        
        public SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate (Internal use only)")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Color Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Color Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Color Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to LEGO NXT Color Sensor notifications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to LEGO NXT Color Sensor notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace the LEGO Color Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Replaces the current state of the LEGO NXT Color Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO NXT Color Sensor Operations
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO NXT Color Sensor Operations")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ColorSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace> {
        
        public ColorSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode mode) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest(mode);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorMode mode, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest(mode);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetMode(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ModeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.SetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Color Sensor Mode
    ///            </summary>
    /// <remarks>The mode determines which LED(s) are turned on.</remarks>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", ElementName="ColorSensorMode")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the NXT Color Sensor Mode.")]
    public enum ColorSensorMode : int {
        
        /// <summary>
        ///            The Color Sensor is in Color Mode with all LEDs On (Default)
        ///            </summary>
        /// <remarks>The Readings range from 1-6 for standard LEGO brick colors.</remarks>
        Color = 0,
        
        /// <summary>
        ///            The Color Sensor is in Red Mode (Red LED On)
        ///            </summary>
        Red = 1,
        
        /// <summary>
        ///            The Color Sensor is in Green Mode (Green LEG On)
        ///            </summary>
        Green = 2,
        
        /// <summary>
        ///            The Color Sensor is in Blue Mode (Blue LED On)
        ///            </summary>
        Blue = 3,
        
        /// <summary>
        ///            The Color Sensor is in Light Sensor Mode (All LEDs Off)
        ///            </summary>
        None = 4,
        
        /// <summary>
        ///            The Color Sensor is in an Unknown Mode
        ///            </summary>
        Unknown = 255,
    }
    
    /// <summary>
    ///            Color Numbers
    ///            </summary>
    /// <remarks>These codes are returned as Readings when the sensor is in Color mode.
    ///            The Readings range from 1-6 for standard LEGO brick colors.</remarks>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", ElementName="ColorNumber")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the codes for the Color Number (from 1 to 6).")]
    public enum ColorNumber : int {
        
        /// <summary>
        ///            The Color is Unknown
        ///            </summary>
        Unknown = 0,
        
        /// <summary>
        ///            Black or nothing in range (no color detected)
        ///            </summary>
        Black = 1,
        
        /// <summary>
        ///            Blue
        ///            </summary>
        Blue = 2,
        
        /// <summary>
        ///            Green
        ///            </summary>
        Green = 3,
        
        /// <summary>
        ///            Yellow
        ///            </summary>
        Yellow = 4,
        
        /// <summary>
        ///            Red
        ///            </summary>
        Red = 5,
        
        /// <summary>
        ///            White (or light is too bright to detect a color)
        ///            </summary>
        White = 6,
    }
    
    /// <summary>
    ///            Lego NXT Color Sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO® MINDSTORMS® NXT Color Sensor (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Color Sensor (v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ColorSensorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorOperations();
            this.AnalogSensorOperations = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ColorSensorOperations, "http://schemas.microsoft.com/robotics/2010/03/lego/nxt/colorsensor.user.html", "ColorSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AnalogSensorOperations, "http://schemas.microsoft.com/robotics/2006/06/analogsensor.html", "AnalogSensorOperations", "/analogsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.ColorSensor.Proxy.ColorSensorOperations ColorSensorOperations;
        
        public global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations AnalogSensorOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy {
    
    
    /// <summary>
    ///            Buttons State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html", ElementName="ButtonState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT buttons\'s state.")]
    public class ButtonState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ButtonState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            The frequency in ms to poll for the buttons (0 = default)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings _Buttons;
        
        /// <summary>
        ///            Identifies the most recent state of the LEGO NXT Buttons.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recent state of the LEGO NXT Buttons.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings Buttons {
            get {
                return this._Buttons;
            }
            set {
                this._Buttons = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ButtonState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            if ((this._Buttons != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Buttons = tmp;
            }
        }
        
        /// <summary>
        ///Clones ButtonState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ButtonState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            writer.Write(this._PollingFrequencyMs);
            if ((this._Buttons == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ButtonState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ButtonState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            this._PollingFrequencyMs = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Buttons = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Nxt Button Readings
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html", ElementName="NxtButtonReadings")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the current state of the LEGO NXT built-in Buttons.")]
    public class NxtButtonReadings : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtButtonReadings() {
        }
        
        public NxtButtonReadings(bool pressedRight, bool pressedLeft, bool pressedEnter, bool pressedCancel) {
            this._PressedRight = pressedRight;
            this._PressedLeft = pressedLeft;
            this._PressedEnter = pressedEnter;
            this._PressedCancel = pressedCancel;
        }
        
        private bool _PressedRight;
        
        /// <summary>
        ///            Right Button is pressed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates that the right button was pressed.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool PressedRight {
            get {
                return this._PressedRight;
            }
            set {
                this._PressedRight = value;
            }
        }
        
        private bool _PressedLeft;
        
        /// <summary>
        ///            Left button is pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the left button was pressed.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool PressedLeft {
            get {
                return this._PressedLeft;
            }
            set {
                this._PressedLeft = value;
            }
        }
        
        private bool _PressedEnter;
        
        /// <summary>
        ///            Enter button is pressed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates that the Enter button was pressed.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public bool PressedEnter {
            get {
                return this._PressedEnter;
            }
            set {
                this._PressedEnter = value;
            }
        }
        
        private bool _PressedCancel;
        
        /// <summary>
        ///            Cancel Button is pressed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates that the Cancel button was pressed.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public bool PressedCancel {
            get {
                return this._PressedCancel;
            }
            set {
                this._PressedCancel = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last buttons reading
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last buttons reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtButtonReadings to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings)(target));
            typedTarget._PressedRight = this._PressedRight;
            typedTarget._PressedLeft = this._PressedLeft;
            typedTarget._PressedEnter = this._PressedEnter;
            typedTarget._PressedCancel = this._PressedCancel;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones NxtButtonReadings
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtButtonReadings to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PressedRight);
            writer.Write(this._PressedLeft);
            writer.Write(this._PressedEnter);
            writer.Write(this._PressedCancel);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes NxtButtonReadings
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtButtonReadings</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PressedRight = reader.ReadBoolean();
            this._PressedLeft = reader.ReadBoolean();
            this._PressedEnter = reader.ReadBoolean();
            this._PressedCancel = reader.ReadBoolean();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Buttons.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates one or more LEGO NXT buttons have been pressed or released
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates one or more LEGO NXT buttons have been pressed or released.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonsUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ButtonsUpdate() {
        }
        
        public ButtonsUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body) : 
                base(body) {
        }
        
        public ButtonsUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribes to Button updates.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to Button updates.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Button Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Button Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe> {
        
        public ButtonOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonsUpdate(bool pressedRight, bool pressedLeft, bool pressedEnter, bool pressedCancel) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings(pressedRight, pressedLeft, pressedEnter, pressedCancel);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonsUpdate(bool pressedRight, bool pressedLeft, bool pressedEnter, bool pressedCancel, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings(pressedRight, pressedLeft, pressedEnter, pressedCancel);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonsUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonsUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.NxtButtonReadings();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonsUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Buttons Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Buttons (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Buttons ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ButtonOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ButtonOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/buttons.user.html", "ButtonOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Buttons.Proxy.ButtonOperations ButtonOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy {
    
    
    /// <summary>
    ///            Battery State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html", ElementName="BatteryState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT battery\'s state.")]
    public class BatteryState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BatteryState() {
        }
        
        private int _BatteryPollingSeconds;
        
        /// <summary>
        ///            Battery Polling Seconds (0 = default)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the frequency in seconds to poll for the battery voltage. \n(0 = defaul" +
            "t)")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) PollingFrequencySeconds")]
        public int BatteryPollingSeconds {
            get {
                return this._BatteryPollingSeconds;
            }
            set {
                this._BatteryPollingSeconds = value;
            }
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private double _MaxVoltage;
        
        /// <summary>
        ///            Full battery power
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the power setting at which the battery is fully charged. \n(Suggested 9" +
            ".0 volts)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double MaxVoltage {
            get {
                return this._MaxVoltage;
            }
            set {
                this._MaxVoltage = value;
            }
        }
        
        private double _CriticalBatteryVoltage;
        
        /// <summary>
        ///            Critical battery voltage
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the battery voltage at which operation may be impaired. \n(Suggested 5.8" +
            " volts)")]
        public double CriticalBatteryVoltage {
            get {
                return this._CriticalBatteryVoltage;
            }
            set {
                this._CriticalBatteryVoltage = value;
            }
        }
        
        private double _MinVoltage;
        
        /// <summary>
        ///            Minimum battery voltage;
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the minimum battery voltage. \n(Suggested 5.0 volts)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double MinVoltage {
            get {
                return this._MinVoltage;
            }
            set {
                this._MinVoltage = value;
            }
        }
        
        private double _PercentBatteryPower;
        
        /// <summary>
        ///            Percentage of remaining battery power
        ///            between 0.0 and 1.0
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the percentage of battery power remaining. \n(0.00 - 1.00)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double PercentBatteryPower {
            get {
                return this._PercentBatteryPower;
            }
            set {
                this._PercentBatteryPower = value;
            }
        }
        
        private double _CurrentBatteryVoltage;
        
        /// <summary>
        ///            Current Battery Voltage
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current battery voltage.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double CurrentBatteryVoltage {
            get {
                return this._CurrentBatteryVoltage;
            }
            set {
                this._CurrentBatteryVoltage = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last battery reading
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last battery reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BatteryState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState)(target));
            typedTarget._BatteryPollingSeconds = this._BatteryPollingSeconds;
            typedTarget._Connected = this._Connected;
            typedTarget._MaxVoltage = this._MaxVoltage;
            typedTarget._CriticalBatteryVoltage = this._CriticalBatteryVoltage;
            typedTarget._MinVoltage = this._MinVoltage;
            typedTarget._PercentBatteryPower = this._PercentBatteryPower;
            typedTarget._CurrentBatteryVoltage = this._CurrentBatteryVoltage;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones BatteryState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BatteryState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._BatteryPollingSeconds);
            writer.Write(this._Connected);
            writer.Write(this._MaxVoltage);
            writer.Write(this._CriticalBatteryVoltage);
            writer.Write(this._MinVoltage);
            writer.Write(this._PercentBatteryPower);
            writer.Write(this._CurrentBatteryVoltage);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes BatteryState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BatteryState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._BatteryPollingSeconds = reader.ReadInt32();
            this._Connected = reader.ReadBoolean();
            this._MaxVoltage = reader.ReadDouble();
            this._CriticalBatteryVoltage = reader.ReadDouble();
            this._MinVoltage = reader.ReadDouble();
            this._PercentBatteryPower = reader.ReadDouble();
            this._CurrentBatteryVoltage = reader.ReadDouble();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Specifies the LEGO NXT battery\'s configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html", ElementName="ConfigureBatteryRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT battery\'s configuration.")]
    public class ConfigureBatteryRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ConfigureBatteryRequest() {
        }
        
        private int _PollingFrequencySeconds;
        
        /// <summary>
        ///            Battery Polling Seconds (0 = default)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the frequency in seconds to poll for the battery voltage. \n(0 = defaul" +
            "t)")]
        public int PollingFrequencySeconds {
            get {
                return this._PollingFrequencySeconds;
            }
            set {
                this._PollingFrequencySeconds = value;
            }
        }
        
        private double _MaxVoltage;
        
        /// <summary>
        ///            Full battery power
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the power setting at which the battery is fully charged. \n(Suggested 9" +
            ".0 volts)")]
        public double MaxVoltage {
            get {
                return this._MaxVoltage;
            }
            set {
                this._MaxVoltage = value;
            }
        }
        
        private double _CriticalBatteryVoltage;
        
        /// <summary>
        ///            Critical battery voltage
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the battery voltage at which operation may be impaired. \n(Suggested 5.8" +
            " volts)")]
        public double CriticalBatteryVoltage {
            get {
                return this._CriticalBatteryVoltage;
            }
            set {
                this._CriticalBatteryVoltage = value;
            }
        }
        
        private double _MinVoltage;
        
        /// <summary>
        ///            Minimum battery voltage;
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the minimum battery voltage. \n(Suggested 5.0 volts)")]
        public double MinVoltage {
            get {
                return this._MinVoltage;
            }
            set {
                this._MinVoltage = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ConfigureBatteryRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest)(target));
            typedTarget._PollingFrequencySeconds = this._PollingFrequencySeconds;
            typedTarget._MaxVoltage = this._MaxVoltage;
            typedTarget._CriticalBatteryVoltage = this._CriticalBatteryVoltage;
            typedTarget._MinVoltage = this._MinVoltage;
        }
        
        /// <summary>
        ///Clones ConfigureBatteryRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ConfigureBatteryRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PollingFrequencySeconds);
            writer.Write(this._MaxVoltage);
            writer.Write(this._CriticalBatteryVoltage);
            writer.Write(this._MinVoltage);
        }
        
        /// <summary>
        ///Deserializes ConfigureBatteryRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ConfigureBatteryRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PollingFrequencySeconds = reader.ReadInt32();
            this._MaxVoltage = reader.ReadDouble();
            this._CriticalBatteryVoltage = reader.ReadDouble();
            this._MinVoltage = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Battery.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets the configuration of the LEGO NXT Battery.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConfigureBattery : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConfigureBattery() {
        }
        
        public ConfigureBattery(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body) : 
                base(body) {
        }
        
        public ConfigureBattery(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Battery Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Battery Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BatteryOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery> {
        
        public BatteryOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConfigureBattery() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConfigureBattery(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConfigureBattery(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConfigureBattery(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBatteryRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.ConfigureBattery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Battery Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Battery (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Battery ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.BatteryOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryOperations();
            this.RoboticsCommonBatteryOperations = new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.BatteryOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/battery.user.html", "BatteryOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RoboticsCommonBatteryOperations, "http://schemas.microsoft.com/2006/06/battery.html", "RoboticsCommonBatteryOperations", "/generic"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Battery.Proxy.BatteryOperations BatteryOperations;
        
        public global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations RoboticsCommonBatteryOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy {
    
    
    /// <summary>
    ///            The NxtBrick State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="NxtBrickState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Brick state.")]
    public class NxtBrickState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtBrickState() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration _Configuration;
        
        /// <summary>
        ///            LEGO Nxt Brick Configuration
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Brick Configuration.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration Configuration {
            get {
                return this._Configuration;
            }
            set {
                this._Configuration = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime _Runtime;
        
        /// <summary>
        ///            LEGO NXT Runtime State
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Runtime state.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime Runtime {
            get {
                return this._Runtime;
            }
            set {
                this._Runtime = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtBrickState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState)(target));
            if ((this._Configuration != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Configuration)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Configuration = tmp;
            }
            if ((this._Runtime != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Runtime)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Runtime = tmp0;
            }
        }
        
        /// <summary>
        ///Clones NxtBrickState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtBrickState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Configuration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Configuration)).Serialize(writer);
            }
            if ((this._Runtime == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Runtime)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes NxtBrickState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtBrickState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Configuration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Runtime = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Configure the LEGO NXT Brick
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="BrickConfiguration")]
    [global::System.ComponentModel.DescriptionAttribute("Configures the LEGO NXT Brick.")]
    public class BrickConfiguration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BrickConfiguration() {
        }
        
        public BrickConfiguration(int serialPort, int baudRate, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType connectionType, bool showInBrowser) {
            this._SerialPort = serialPort;
            this._BaudRate = baudRate;
            this._ConnectionType = connectionType;
            this._ShowInBrowser = showInBrowser;
        }
        
        private int _SerialPort;
        
        /// <summary>
        ///            Communications Serial Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Serial Port used to communicate with the LEGO NXT Brick.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int SerialPort {
            get {
                return this._SerialPort;
            }
            set {
                this._SerialPort = value;
            }
        }
        
        private int _BaudRate;
        
        /// <summary>
        ///            Communications Baud Rate
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Baud Rate (0 = default).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int BaudRate {
            get {
                return this._BaudRate;
            }
            set {
                this._BaudRate = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType _ConnectionType;
        
        /// <summary>
        ///            Lego Connection Type
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies how the LEGO NXT Brick is connected.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType ConnectionType {
            get {
                return this._ConnectionType;
            }
            set {
                this._ConnectionType = value;
            }
        }
        
        private bool _ShowInBrowser;
        
        /// <summary>
        ///            Specifies that the LEGO NXT Brick service will be displayed in a web browser.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies that the LEGO NXT Brick service will be displayed in a web browser.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public bool ShowInBrowser {
            get {
                return this._ShowInBrowser;
            }
            set {
                this._ShowInBrowser = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BrickConfiguration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration)(target));
            typedTarget._SerialPort = this._SerialPort;
            typedTarget._BaudRate = this._BaudRate;
            typedTarget._ConnectionType = this._ConnectionType;
            typedTarget._ShowInBrowser = this._ShowInBrowser;
        }
        
        /// <summary>
        ///Clones BrickConfiguration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BrickConfiguration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._SerialPort);
            writer.Write(this._BaudRate);
            writer.Write(((int)(this._ConnectionType)));
            writer.Write(this._ShowInBrowser);
        }
        
        /// <summary>
        ///Deserializes BrickConfiguration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BrickConfiguration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._SerialPort = reader.ReadInt32();
            this._BaudRate = reader.ReadInt32();
            this._ConnectionType = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType)(reader.ReadInt32()));
            this._ShowInBrowser = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Runtime State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="NxtRuntime")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Runtime state.")]
    public class NxtRuntime : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtRuntime() {
        }
        
        private string _BrickName;
        
        /// <summary>
        ///            The LEGO NXT Brick Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Brick.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Name")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public string BrickName {
            get {
                return this._BrickName;
            }
            set {
                this._BrickName = value;
            }
        }
        
        private string _Firmware;
        
        /// <summary>
        ///            The LEGO NXT Firmware Version
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the LEGO NXT Firmware Version.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public string Firmware {
            get {
                return this._Firmware;
            }
            set {
                this._Firmware = value;
            }
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Indicates an active connection to the LEGO NXT Brick
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates an active connection to the LEGO NXT Brick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest> _Devices;
        
        /// <summary>
        ///            Identifies Runtime devices which are attached to the LEGO Brick
        ///            </summary>
        /// <remarks>The key is LegoNxtConnection.ToString()</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies Runtime devices which are attached to the LEGO NXT Brick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest> Devices {
            get {
                return this._Devices;
            }
            set {
                this._Devices = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtRuntime to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime)(target));
            typedTarget._BrickName = this._BrickName;
            typedTarget._Firmware = this._Firmware;
            typedTarget._Connected = this._Connected;
            if ((this._Devices != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest> tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Devices)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Devices = tmp;
            }
        }
        
        /// <summary>
        ///Clones NxtRuntime
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtRuntime();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtRuntime to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._BrickName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._BrickName);
            }
            if ((this._Firmware == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Firmware);
            }
            writer.Write(this._Connected);
            if ((this._Devices == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Devices)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes NxtRuntime
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtRuntime</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._BrickName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Firmware = reader.ReadString();
            }
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Devices = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest>())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Attach a Sensor or Motor to the LEGO Brick
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="AttachRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Attaches a Sensor or Motor to the LEGO Brick.")]
    public class AttachRequest : global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AttachRequest() {
        }
        
        public AttachRequest(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration registration) {
            this._Registration = registration;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration _Registration;
        
        /// <summary>
        ///            Registration
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the device registration.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration Registration {
            get {
                return this._Registration;
            }
            set {
                this._Registration = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence _InitializationCommands;
        
        /// <summary>
        ///            Sensor Initialization Sequence which is executed when the sensor is attached,
        ///            and any time the LEGO NXT brick is reinitialized.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the sensor Initialization Sequence which is executed when the sensor is" +
            " attached, \nand any time the LEGO NXT brick is reinitialized.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence InitializationCommands {
            get {
                return this._InitializationCommands;
            }
            set {
                this._InitializationCommands = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence _PollingCommands;
        
        /// <summary>
        ///            Commands which are executed for continuous polling of the sensor.
        ///            </summary>
        /// <remarks>PollingFrequencyMs must be greater than zero.</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Commands which are executed for continuous polling of the sensor.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence PollingCommands {
            get {
                return this._PollingCommands;
            }
            set {
                this._PollingCommands = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        /// <summary>
        ///            Timestamp
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the most recent attach request or polling adjustment for this device.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AttachRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest)(target));
            if ((this._Registration != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Registration)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Registration = tmp;
            }
            if ((this._InitializationCommands != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(this._InitializationCommands)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._InitializationCommands = tmp0;
            }
            if ((this._PollingCommands != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence tmp1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence();
                ((Microsoft.Dss.Core.IDssSerializable)(this._PollingCommands)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._PollingCommands = tmp1;
            }
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones AttachRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AttachRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._Registration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Registration)).Serialize(writer);
            }
            if ((this._InitializationCommands == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._InitializationCommands)).Serialize(writer);
            }
            if ((this._PollingCommands == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._PollingCommands)).Serialize(writer);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes AttachRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AttachRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._Registration = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._InitializationCommands = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._PollingCommands = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.NxtCommandSequence())).Deserialize(reader)));
            }
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Register a Sensor or Motor to the LEGO Brick before Attaching
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="Registration")]
    [global::System.ComponentModel.DescriptionAttribute("Registers a Sensor or Motor to the LEGO Brick before Attaching.")]
    public class Registration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Registration() {
        }
        
        public Registration(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection connection, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType deviceType, string deviceModel, string deviceContract, string serviceUri, string name) {
            this._Connection = connection;
            this._DeviceType = deviceType;
            this._DeviceModel = deviceModel;
            this._DeviceContract = deviceContract;
            this._ServiceUri = serviceUri;
            this._Name = name;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection _Connection;
        
        /// <summary>
        ///            The Brick Connection Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Port or Connection for this device.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection Connection {
            get {
                return this._Connection;
            }
            set {
                this._Connection = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType _DeviceType;
        
        /// <summary>
        ///            The Device Type
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Type of the device being registered.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType DeviceType {
            get {
                return this._DeviceType;
            }
            set {
                this._DeviceType = value;
            }
        }
        
        private string _DeviceModel;
        
        /// <summary>
        ///            The Device Model
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Model of the device being registered.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string DeviceModel {
            get {
                return this._DeviceModel;
            }
            set {
                this._DeviceModel = value;
            }
        }
        
        private string _DeviceContract;
        
        /// <summary>
        ///            The Device Contract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the DSS Service Contract of the Device being registered.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public string DeviceContract {
            get {
                return this._DeviceContract;
            }
            set {
                this._DeviceContract = value;
            }
        }
        
        private string _ServiceUri;
        
        /// <summary>
        ///            The Service URI. 
        ///            Use: ServiceInfo.Service
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the DSS Service URI of the Device being registered.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=5)]
        public string ServiceUri {
            get {
                return this._ServiceUri;
            }
            set {
                this._ServiceUri = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            Identifies the user friendly name for the LEGO NXT Device.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the user friendly name for the LEGO NXT Device.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=6)]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private string _SubscriberUri;
        
        /// <summary>
        ///            Subscription Uri
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Service URI of the subscribing LEGO NXT Device.")]
        public string SubscriberUri {
            get {
                return this._SubscriberUri;
            }
            set {
                this._SubscriberUri = value;
            }
        }
        
        private byte _I2CBusAddress;
        
        /// <summary>
        ///            The I2C Bus Address of the Ultrasonic or other I2C Sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the I2C Bus Address of the Ultrasonic or other I2C Sensor.")]
        public byte I2CBusAddress {
            get {
                return this._I2CBusAddress;
            }
            set {
                this._I2CBusAddress = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Registration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration)(target));
            if ((this._Connection != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Connection)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Connection = tmp;
            }
            typedTarget._DeviceType = this._DeviceType;
            typedTarget._DeviceModel = this._DeviceModel;
            typedTarget._DeviceContract = this._DeviceContract;
            typedTarget._ServiceUri = this._ServiceUri;
            typedTarget._Name = this._Name;
            typedTarget._SubscriberUri = this._SubscriberUri;
            typedTarget._I2CBusAddress = this._I2CBusAddress;
        }
        
        /// <summary>
        ///Clones Registration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Registration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Connection == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Connection)).Serialize(writer);
            }
            writer.Write(((int)(this._DeviceType)));
            if ((this._DeviceModel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DeviceModel);
            }
            if ((this._DeviceContract == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DeviceContract);
            }
            if ((this._ServiceUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ServiceUri);
            }
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            if ((this._SubscriberUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SubscriberUri);
            }
            writer.Write(this._I2CBusAddress);
        }
        
        /// <summary>
        ///Deserializes Registration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Registration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Connection = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection())).Deserialize(reader)));
            }
            this._DeviceType = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._DeviceModel = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DeviceContract = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._ServiceUri = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._SubscriberUri = reader.ReadString();
            }
            this._I2CBusAddress = reader.ReadByte();
            return this;
        }
    }
    
    /// <summary>
    ///            Disconnect from the LEGO NXT Brick Hardware.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="DisconnectRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Disconnects from the LEGO NXT Brick Hardware.")]
    public class DisconnectRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DisconnectRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current DisconnectRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest)(target));
        }
        
        /// <summary>
        ///Clones DisconnectRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DisconnectRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes DisconnectRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DisconnectRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Attach Response which identifies which port the sensor was bound to.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="AttachResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies which port the sensor was bound to.")]
    public class AttachResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AttachResponse() {
        }
        
        public AttachResponse(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection connection, string deviceModel) {
            this._Connection = connection;
            this._DeviceModel = deviceModel;
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection _Connection;
        
        /// <summary>
        ///            Connection
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the port which was bound to the LEGO NXT Device.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection Connection {
            get {
                return this._Connection;
            }
            set {
                this._Connection = value;
            }
        }
        
        private string _DeviceModel;
        
        /// <summary>
        ///            Device Model
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the model of the device which was attached to the LEGO NXT Brick.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string DeviceModel {
            get {
                return this._DeviceModel;
            }
            set {
                this._DeviceModel = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AttachResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse)(target));
            if ((this._Connection != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Connection)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Connection = tmp;
            }
            typedTarget._DeviceModel = this._DeviceModel;
        }
        
        /// <summary>
        ///Clones AttachResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AttachResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Connection == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Connection)).Serialize(writer);
            }
            if ((this._DeviceModel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DeviceModel);
            }
        }
        
        /// <summary>
        ///Deserializes AttachResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AttachResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Connection = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._DeviceModel = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Detach a Sensor or Motor from the LEGO Brick
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="DetachRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Detaches a Sensor or Motor from the LEGO Brick.")]
    public class DetachRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DetachRequest() {
        }
        
        public DetachRequest(string serviceUri) {
            this._ServiceUri = serviceUri;
        }
        
        private string _ServiceUri;
        
        /// <summary>
        ///            The Service URI of a LEGO NXT Device 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Service URI of the service being detached.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string ServiceUri {
            get {
                return this._ServiceUri;
            }
            set {
                this._ServiceUri = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DetachRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest)(target));
            typedTarget._ServiceUri = this._ServiceUri;
        }
        
        /// <summary>
        ///Clones DetachRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DetachRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._ServiceUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ServiceUri);
            }
        }
        
        /// <summary>
        ///Deserializes DetachRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DetachRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._ServiceUri = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Adjust the Polling Frequency for a LEGO NXT Device.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="AdjustPollingFrequencyRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Adjust the Polling Frequency for a LEGO NXT Device.")]
    public class AdjustPollingFrequencyRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AdjustPollingFrequencyRequest() {
        }
        
        public AdjustPollingFrequencyRequest(string serviceUri, int pollingFrequencyMs) {
            this._ServiceUri = serviceUri;
            this._PollingFrequencyMs = pollingFrequencyMs;
        }
        
        private string _ServiceUri;
        
        /// <summary>
        ///            The Service URI of a LEGO NXT Device 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Service URI of the service whose polling frequency is updated.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string ServiceUri {
            get {
                return this._ServiceUri;
            }
            set {
                this._ServiceUri = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Indicates the new Polling Frequency in milliseconds. \n(-1 = disabled; 0 = Original setting; &gt; 0 = ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the new Polling Frequency in milliseconds. \n(-1 = disabled; 0 = Origina" +
            "l setting; > 0 = ms)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AdjustPollingFrequencyRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest)(target));
            typedTarget._ServiceUri = this._ServiceUri;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones AdjustPollingFrequencyRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AdjustPollingFrequencyRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._ServiceUri == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ServiceUri);
            }
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes AdjustPollingFrequencyRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AdjustPollingFrequencyRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._ServiceUri = reader.ReadString();
            }
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            The Adjusted Polling Frequency.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="AdjustPollingFrequencyResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the adjusted polling frequency.")]
    public class AdjustPollingFrequencyResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AdjustPollingFrequencyResponse() {
        }
        
        public AdjustPollingFrequencyResponse(int pollingFrequencyMs) {
            this._PollingFrequencyMs = pollingFrequencyMs;
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency Milliseconds (&gt; 0, -1 disabled)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds. \n(-1 = disabled; > 0 = ms)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AdjustPollingFrequencyResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse)(target));
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones AdjustPollingFrequencyResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AdjustPollingFrequencyResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes AdjustPollingFrequencyResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AdjustPollingFrequencyResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Play a tone on the NXT brick for the specified duration
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="Note")]
    [global::System.ComponentModel.DescriptionAttribute("Plays a tone on the NXT brick for the specified duration.")]
    public class Note : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Note() {
        }
        
        public Note(int frequency, int duration) {
            this._Frequency = frequency;
            this._Duration = duration;
        }
        
        private int _Frequency;
        
        /// <summary>
        ///            200 - 14000 Hz
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the frequency of the note (200 - 14000 Hz).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Frequency {
            get {
                return this._Frequency;
            }
            set {
                this._Frequency = value;
            }
        }
        
        private int _Duration;
        
        /// <summary>
        ///            Duration to play tome in ms
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the duration to play the note (in ms).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int Duration {
            get {
                return this._Duration;
            }
            set {
                this._Duration = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Note to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note)(target));
            typedTarget._Frequency = this._Frequency;
            typedTarget._Duration = this._Duration;
        }
        
        /// <summary>
        ///Clones Note
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Note to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Frequency);
            writer.Write(this._Duration);
        }
        
        /// <summary>
        ///Deserializes Note
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Note</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Frequency = reader.ReadInt32();
            this._Duration = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            A LEGO Response exception 
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="LegoResponseException")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates a failed LEGO Command Response.")]
    public class LegoResponseException : global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LegoResponseException() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand _OriginalCommand;
        
        /// <summary>
        ///            LEGO Command
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the original LEGO Command.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand OriginalCommand {
            get {
                return this._OriginalCommand;
            }
            set {
                this._OriginalCommand = value;
            }
        }
        
        private string _ErrorMessage;
        
        /// <summary>
        ///            Error Message
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Runtime Exception.")]
        public string ErrorMessage {
            get {
                return this._ErrorMessage;
            }
            set {
                this._ErrorMessage = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LegoResponseException to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException)(target));
            if ((this._OriginalCommand != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
                ((Microsoft.Dss.Core.IDssSerializable)(this._OriginalCommand)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._OriginalCommand = tmp;
            }
            typedTarget._ErrorMessage = this._ErrorMessage;
        }
        
        /// <summary>
        ///Clones LegoResponseException
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoResponseException();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LegoResponseException to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._OriginalCommand == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._OriginalCommand)).Serialize(writer);
            }
            if ((this._ErrorMessage == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ErrorMessage);
            }
        }
        
        /// <summary>
        ///Deserializes LegoResponseException
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LegoResponseException</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._OriginalCommand = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._ErrorMessage = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Categories published by Microsoft to group LEGO services together.
    ///            These categories are available for use by any Dss Service which works in conjunction with the LEGO services.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", ElementName="LegoCategories")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies Categories published by Microsoft to group LEGO services together.")]
    public class LegoCategories : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LegoCategories() {
        }
        
        /// <summary>
        ///            Indicates that the service works specifically with LEGO RCX.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates that the service works specifically with LEGO RCX.")]
        public const string RCX = "http://schemas.microsoft.com/categories/robotics/lego/rcx.html";
        
        /// <summary>
        ///            Indicates that the service works specifically with the 'LEGO(R) NXT Brick' service.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates that the service works specifically with the \'LEGO(R) NXT Brick\' servic" +
            "e.")]
        public const string NXT = "http://schemas.microsoft.com/categories/robotics/lego/nxt.html";
        
        /// <summary>
        ///Copies the data member values of the current LegoCategories to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories)(target));
        }
        
        /// <summary>
        ///Clones LegoCategories
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoCategories();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LegoCategories to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes LegoCategories
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LegoCategories</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            NxtBrick Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Configure the LEGO NXT Brick
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Connects to the LEGO NXT Brick Hardware.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToHardware : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToHardware() {
        }
        
        public ConnectToHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body) : 
                base(body) {
        }
        
        public ConnectToHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Disconnect from the LEGO NXT Brick Hardware.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Disconnects from the LEGO NXT Brick Hardware.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DisconnectFromHardware : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DisconnectFromHardware() {
        }
        
        public DisconnectFromHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body) : 
                base(body) {
        }
        
        public DisconnectFromHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Reserve a port for the specified device
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) InternalReserveDevicePort")]
    [global::System.ComponentModel.DescriptionAttribute("Reserves a port for the specified device\n*** Valid only for third party LEGO Devi" +
        "ce services. ***")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReserveDevicePort : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault>> {
        
        public ReserveDevicePort() {
        }
        
        public ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body) : 
                base(body) {
        }
        
        public ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Attach a Sensor or Motor to the LEGO Brick
    ///            and send notifications when sensor data is updated.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) InternalAttachDevice")]
    [global::System.ComponentModel.DescriptionAttribute("Attaches a Sensor or Motor to the LEGO Brick\n*** Used by custom LEGO NXT sensor a" +
        "nd actuator services. ***")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AttachAndSubscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault>> {
        
        public AttachAndSubscribe() {
        }
        
        public AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body) : 
                base(body) {
        }
        
        public AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Detach a Sensor or Motor from the LEGO Brick
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) InternalDetachDevice")]
    [global::System.ComponentModel.DescriptionAttribute("Detaches a Sensor or Motor from the LEGO Brick\n*** Valid only for third party LEG" +
        "O Device services. ***")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Detach : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Detach() {
        }
        
        public Detach(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body) : 
                base(body) {
        }
        
        public Detach(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            AdjustPollingFrequency for a LEGO NXT device.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) InternalAdjustDevicePollingFrequency")]
    [global::System.ComponentModel.DescriptionAttribute("Adjust the Polling Frequency of a Sensor or Motor.\n*** Valid only for third party" +
        " LEGO Device services. ***")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AdjustPollingFrequency : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse, global:: W3C.Soap.Fault>> {
        
        public AdjustPollingFrequency() {
        }
        
        public AdjustPollingFrequency(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body) : 
                base(body) {
        }
        
        public AdjustPollingFrequency(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send a direct LEGO Command to the brick and wait for the response data
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SendRawLowSpeedCommand")]
    [global::System.ComponentModel.DescriptionAttribute("Sends a LEGO Command to the Low Speed interface and waits for the response data.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendLowSpeedCommand : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault>> {
        
        public SendLowSpeedCommand() {
        }
        
        public SendLowSpeedCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body) : 
                base(body) {
        }
        
        public SendLowSpeedCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send a direct LEGO Command to the brick and wait for the response data
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SendRawCommand")]
    [global::System.ComponentModel.DescriptionAttribute("Sends a direct LEGO Command to the brick and waits for the response data.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendNxtCommand : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault>> {
        
        public SendNxtCommand() {
        }
        
        public SendNxtCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body) : 
                base(body) {
        }
        
        public SendNxtCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe to LEGO NXT Brick Connection notifications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to LEGO NXT Brick Connection notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates a period sensor was updated. Valid only for LEGO Device services
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) InternalSensorUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Provides custom notifications which indicates a periodic sensor was updated.\n*** " +
        "Valid only for third party LEGO Device services. ***")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LegoSensorUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public LegoSensorUpdate() {
        }
        
        public LegoSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body) : 
                base(body) {
        }
        
        public LegoSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Play a tone on the internal LEGO NXT Speaker
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Plays a tone on the internal LEGO NXT Speaker.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class PlayTone : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public PlayTone() {
        }
        
        public PlayTone(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body) : 
                base(body) {
        }
        
        public PlayTone(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            NxtBrick Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("NxtBrick Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NxtBrickOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone> {
        
        public NxtBrickOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToHardware(int serialPort, int baudRate, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType connectionType, bool showInBrowser) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration(serialPort, baudRate, connectionType, showInBrowser);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToHardware(int serialPort, int baudRate, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoConnectionType connectionType, bool showInBrowser, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration(serialPort, baudRate, connectionType, showInBrowser);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.BrickConfiguration();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ConnectToHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DisconnectFromHardware() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DisconnectFromHardware(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DisconnectFromHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DisconnectFromHardware(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DisconnectFromHardware(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection connection, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType deviceType, string deviceModel, string deviceContract, string serviceUri, string name) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration(connection, deviceType, deviceModel, deviceContract, serviceUri, name);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoNxtConnection connection, global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.LegoDeviceType deviceType, string deviceModel, string deviceContract, string serviceUri, string name, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration(connection, deviceType, deviceModel, deviceContract, serviceUri, name);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReserveDevicePort(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.ReserveDevicePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration registration, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest(registration);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Registration registration, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe operation, params System.Type[] types) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest(registration);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachResponse, global:: W3C.Soap.Fault> AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AttachAndSubscribe(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AttachAndSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Detach(string serviceUri) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest(serviceUri);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Detach(string serviceUri, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest(serviceUri);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Detach(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Detach(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.DetachRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Detach(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse, global:: W3C.Soap.Fault> AdjustPollingFrequency(string serviceUri, int pollingFrequencyMs) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest(serviceUri, pollingFrequencyMs);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AdjustPollingFrequency(string serviceUri, int pollingFrequencyMs, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest(serviceUri, pollingFrequencyMs);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyResponse, global:: W3C.Soap.Fault> AdjustPollingFrequency(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AdjustPollingFrequency(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequencyRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.AdjustPollingFrequency(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendLowSpeedCommand() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendLowSpeedCommand(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendLowSpeedCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendLowSpeedCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoLSWrite();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendLowSpeedCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendNxtCommand() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendNxtCommand(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse, global:: W3C.Soap.Fault> SendNxtCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendNxtCommand(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoCommand();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.SendNxtCommand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LegoSensorUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LegoSensorUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LegoSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LegoSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Commands.LegoResponse();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.LegoSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> PlayTone(int frequency, int duration) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note(frequency, duration);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice PlayTone(int frequency, int duration, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note(frequency, duration);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> PlayTone(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice PlayTone(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.Note();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.PlayTone(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for NxtBrick
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Brick Service (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Brick ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.NxtBrickOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.NxtBrickOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/brick.user.html", "NxtBrickOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Brick.Proxy.NxtBrickOperations NxtBrickOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy {
    
    
    /// <summary>
    ///            LEGO NXT Sound Sensor Configuration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html", ElementName="SoundSensorConfig")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sound Sensor Configuration.")]
    public class SoundSensorConfig : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SoundSensorConfig() {
        }
        
        public SoundSensorConfig(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            this._SensorPort = sensorPort;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The name of this Sound Sensor instance
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Sound Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            LEGO NXT Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SoundSensorConfig to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig)(target));
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
        }
        
        /// <summary>
        ///Clones SoundSensorConfig
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SoundSensorConfig to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
        }
        
        /// <summary>
        ///Deserializes SoundSensorConfig
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SoundSensorConfig</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            LEGO NXT Sound Sensor State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html", ElementName="SoundSensorState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sound Sensor state.")]
    public class SoundSensorState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SoundSensorState() {
        }
        
        private bool _Connected;
        
        /// <summary>
        ///            Is the Sensor connected to a LEGO Brick?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a connection to the LEGO NXT Brick Service.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Connected {
            get {
                return this._Connected;
            }
            set {
                this._Connected = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for the LEGO NXT Sound Sensor.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort _SensorPort;
        
        /// <summary>
        ///            Sensor Port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Sensor Port.")]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort SensorPort {
            get {
                return this._SensorPort;
            }
            set {
                this._SensorPort = value;
            }
        }
        
        private int _PollingFrequencyMs;
        
        /// <summary>
        ///            Polling Freqency (ms)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Polling Frequency in milliseconds (0 = default).")]
        public int PollingFrequencyMs {
            get {
                return this._PollingFrequencyMs;
            }
            set {
                this._PollingFrequencyMs = value;
            }
        }
        
        private int _Intensity;
        
        /// <summary>
        ///            The current sound intensity received from the Sound Sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current sound intensity received from the Sound Sensor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int Intensity {
            get {
                return this._Intensity;
            }
            set {
                this._Intensity = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            The time of the last sensor update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the last sensor reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SoundSensorState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState)(target));
            typedTarget._Connected = this._Connected;
            typedTarget._Name = this._Name;
            typedTarget._SensorPort = this._SensorPort;
            typedTarget._PollingFrequencyMs = this._PollingFrequencyMs;
            typedTarget._Intensity = this._Intensity;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones SoundSensorState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SoundSensorState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Connected);
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._SensorPort)));
            writer.Write(this._PollingFrequencyMs);
            writer.Write(this._Intensity);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes SoundSensorState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SoundSensorState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Connected = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._SensorPort = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort)(reader.ReadInt32()));
            this._PollingFrequencyMs = reader.ReadInt32();
            this._Intensity = reader.ReadInt32();
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Configure Device Connection
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConnectionUpdate")]
    [global::System.ComponentModel.DescriptionAttribute("Connects the LEGO NXT Sound Sensor to be plugged into the NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ConnectToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ConnectToBrick() {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body) : 
                base(body) {
        }
        
        public ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get the LEGO Sound Sensor State
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Sound Sensor.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates an update to the LEGO NXT Sound Sensor State.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the LEGO NXT Sound Sensor State.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SoundSensorUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SoundSensorUpdate() {
        }
        
        public SoundSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body) : 
                base(body) {
        }
        
        public SoundSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Sound Sensor Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sound Sensor Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SoundSensorOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe> {
        
        public SoundSensorOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig(sensorPort);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.Common.NxtSensorPort sensorPort, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig(sensorPort);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ConnectToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorConfig();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.ConnectToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SoundSensorUpdate() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SoundSensorUpdate(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SoundSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SoundSensorUpdate(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Sound Sensor Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to the LEGO� MINDSTORMS� NXT Sound Sensor (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT Sound Sensor ​(v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SoundSensorOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorOperations();
            this.AnalogSensorOperations = new global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SoundSensorOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/soundsensor.user.html", "SoundSensorOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AnalogSensorOperations, "http://schemas.microsoft.com/robotics/2006/06/analogsensor.html", "AnalogSensorOperations", "/analogsensor"));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.SoundSensor.Proxy.SoundSensorOperations SoundSensorOperations;
        
        public global::Microsoft.Robotics.Services.AnalogSensor.Proxy.AnalogSensorOperations AnalogSensorOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy {
    
    
    /// <summary>
    ///            NXT IO State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="NxtIOState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the LEGO NXT Input Output service state.")]
    public class NxtIOState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public NxtIOState() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles _ResponseFiles;
        
        /// <summary>
        ///            The results of the last query.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the results of the last query.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles ResponseFiles {
            get {
                return this._ResponseFiles;
            }
            set {
                this._ResponseFiles = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NxtIOState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState)(target));
            if ((this._ResponseFiles != null)) {
                global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles tmp = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles();
                ((Microsoft.Dss.Core.IDssSerializable)(this._ResponseFiles)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._ResponseFiles = tmp;
            }
        }
        
        /// <summary>
        ///Clones NxtIOState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NxtIOState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._ResponseFiles == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._ResponseFiles)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes NxtIOState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NxtIOState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._ResponseFiles = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            The files found on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="ResponseFiles")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the files found on the LEGO NXT Brick.")]
    public class ResponseFiles : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ResponseFiles() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile> _Files;
        
        /// <summary>
        ///            Files Found.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the files which were found.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile> Files {
            get {
                return this._Files;
            }
            set {
                this._Files = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ResponseFiles to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles)(target));
            if ((this._Files != null)) {
                int count = this._Files.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile tmp0 = default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile);
                    if ((this._Files[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile tmp1 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Files[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Files = tmp;
            }
        }
        
        /// <summary>
        ///Clones ResponseFiles
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ResponseFiles to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Files == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Files.Count);
                for (int indexFiles = 0; (indexFiles < this._Files.Count); indexFiles = (indexFiles + 1)) {
                    if ((this._Files[indexFiles] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Files[indexFiles])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ResponseFiles
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ResponseFiles</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Files = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Files.Add(default(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile));
                    if ((reader.ReadByte() != 0)) {
                        this._Files[index0] = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            A LEGO file
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="LegoFile")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a LEGO file.")]
    public class LegoFile : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LegoFile() {
        }
        
        private string _FileName;
        
        /// <summary>
        ///            The LEGO (15.3) filename.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the name of the file. (Filenames are limited to 15 characters and a thr" +
            "ee character extension.)")]
        public string FileName {
            get {
                return this._FileName;
            }
            set {
                this._FileName = value;
            }
        }
        
        private int _FileSize;
        
        /// <summary>
        ///            The size of the file.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the size of the file.")]
        public int FileSize {
            get {
                return this._FileSize;
            }
            set {
                this._FileSize = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LegoFile to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile)(target));
            typedTarget._FileName = this._FileName;
            typedTarget._FileSize = this._FileSize;
        }
        
        /// <summary>
        ///Clones LegoFile
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.LegoFile();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LegoFile to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._FileName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FileName);
            }
            writer.Write(this._FileSize);
        }
        
        /// <summary>
        ///Deserializes LegoFile
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LegoFile</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._FileName = reader.ReadString();
            }
            this._FileSize = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            The name of the files to search for on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="QueryFilesRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Requests to search for a file on the LEGO NXT Brick.")]
    public class QueryFilesRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryFilesRequest() {
        }
        
        private string _Filespec;
        
        /// <summary>
        ///            The filename to search for. (use '*' as a wild card)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the filename to search for. (use \'*\' as a wild card)")]
        public string Filespec {
            get {
                return this._Filespec;
            }
            set {
                this._Filespec = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryFilesRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest)(target));
            typedTarget._Filespec = this._Filespec;
        }
        
        /// <summary>
        ///Clones QueryFilesRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryFilesRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Filespec == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Filespec);
            }
        }
        
        /// <summary>
        ///Deserializes QueryFilesRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryFilesRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Filespec = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Delete a file on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="DeleteFileRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Deletes a file on the LEGO NXT Brick.")]
    public class DeleteFileRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DeleteFileRequest() {
        }
        
        private string _FileName;
        
        /// <summary>
        ///            The name of the file to delete from the LEGO NXT Brick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the filename to search and delete on the LEGO NXT Brick. (use \'*\' as a " +
            "wild card.)")]
        public string FileName {
            get {
                return this._FileName;
            }
            set {
                this._FileName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DeleteFileRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest)(target));
            typedTarget._FileName = this._FileName;
        }
        
        /// <summary>
        ///Clones DeleteFileRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DeleteFileRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._FileName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FileName);
            }
        }
        
        /// <summary>
        ///Deserializes DeleteFileRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DeleteFileRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._FileName = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Send a file to the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="SendFileRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Sends a file to the LEGO NXT Brick.")]
    public class SendFileRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SendFileRequest() {
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssUri _FileLocation;
        
        /// <summary>
        ///            The fully qualified location of the file to send.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the fully qualified location of the file to send.")]
        public global::Microsoft.Dss.Core.Utilities.DssUri FileLocation {
            get {
                return this._FileLocation;
            }
            set {
                this._FileLocation = value;
            }
        }
        
        private byte[] _FileData;
        
        /// <summary>
        ///            The file data to send to the LEGO NXT Brick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the file data to send to the LEGO NXT Brick.")]
        public byte[] FileData {
            get {
                return this._FileData;
            }
            set {
                this._FileData = value;
            }
        }
        
        private string _FileName;
        
        /// <summary>
        ///            The name of the file when it is sent to the LEGO NXT.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the name of the file when it is saved to the LEGO NXT.")]
        public string FileName {
            get {
                return this._FileName;
            }
            set {
                this._FileName = value;
            }
        }
        
        private bool _ReplaceExistingFile;
        
        /// <summary>
        ///            The name of the file when it is sent to the LEGO NXT.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies whether to replace an existing file.")]
        public bool ReplaceExistingFile {
            get {
                return this._ReplaceExistingFile;
            }
            set {
                this._ReplaceExistingFile = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SendFileRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest)(target));
            if ((this._FileLocation != null)) {
                global::Microsoft.Dss.Core.Utilities.DssUri tmp = new global::Microsoft.Dss.Core.Utilities.DssUri();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FileLocation)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._FileLocation = tmp;
            }
            if ((this._FileData != null)) {
                int count = this._FileData.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(this._FileData, 0, tmp0, 0, global::System.Buffer.ByteLength(this._FileData));
                typedTarget._FileData = tmp0;
            }
            typedTarget._FileName = this._FileName;
            typedTarget._ReplaceExistingFile = this._ReplaceExistingFile;
        }
        
        /// <summary>
        ///Clones SendFileRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SendFileRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._FileLocation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FileLocation)).Serialize(writer);
            }
            if ((this._FileData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FileData.Length);
                writer.Write(this._FileData);
            }
            if ((this._FileName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FileName);
            }
            writer.Write(this._ReplaceExistingFile);
        }
        
        /// <summary>
        ///Deserializes SendFileRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SendFileRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._FileLocation = ((global::Microsoft.Dss.Core.Utilities.DssUri)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssUri())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._FileData = reader.ReadBytes(count0);
            }
            if ((reader.ReadByte() != 0)) {
                this._FileName = reader.ReadString();
            }
            this._ReplaceExistingFile = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Stop any program running on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="StopLegoProgramRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Stops any program running on the LEGO NXT Brick.")]
    public class StopLegoProgramRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StopLegoProgramRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current StopLegoProgramRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest)(target));
        }
        
        /// <summary>
        ///Clones StopLegoProgramRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StopLegoProgramRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes StopLegoProgramRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StopLegoProgramRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Start a program on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="StartLegoProgramRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a program on the LEGO NXT Brick.")]
    public class StartLegoProgramRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StartLegoProgramRequest() {
        }
        
        private string _Program;
        
        /// <summary>
        ///            The name of the program to start.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the name of the program to start.")]
        public string Program {
            get {
                return this._Program;
            }
            set {
                this._Program = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current StartLegoProgramRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest)(target));
            typedTarget._Program = this._Program;
        }
        
        /// <summary>
        ///Clones StartLegoProgramRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StartLegoProgramRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Program == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Program);
            }
        }
        
        /// <summary>
        ///Deserializes StartLegoProgramRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StartLegoProgramRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Program = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Query for any program running on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="QueryRunningLegoProgramRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Queries for any program running on the LEGO NXT Brick.")]
    public class QueryRunningLegoProgramRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryRunningLegoProgramRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryRunningLegoProgramRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest)(target));
        }
        
        /// <summary>
        ///Clones QueryRunningLegoProgramRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryRunningLegoProgramRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes QueryRunningLegoProgramRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryRunningLegoProgramRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Indicates the program which is currently running on the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="RunningProgramResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the program which is currently running on the LEGO NXT Brick.")]
    public class RunningProgramResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RunningProgramResponse() {
        }
        
        private string _Program;
        
        /// <summary>
        ///            The name of the running LEGO NXT program.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the name of the running LEGO NXT program.")]
        public string Program {
            get {
                return this._Program;
            }
            set {
                this._Program = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RunningProgramResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse)(target));
            typedTarget._Program = this._Program;
        }
        
        /// <summary>
        ///Clones RunningProgramResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RunningProgramResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Program == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Program);
            }
        }
        
        /// <summary>
        ///Deserializes RunningProgramResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RunningProgramResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Program = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Change the Name of the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="SetBrickNameRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Changes the Name of the LEGO NXT Brick.")]
    public class SetBrickNameRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetBrickNameRequest() {
        }
        
        private string _BrickName;
        
        /// <summary>
        ///            The new name of the LEGO NXT Brick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the new name of the LEGO NXT Brick.")]
        public string BrickName {
            get {
                return this._BrickName;
            }
            set {
                this._BrickName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetBrickNameRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest)(target));
            typedTarget._BrickName = this._BrickName;
        }
        
        /// <summary>
        ///Clones SetBrickNameRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetBrickNameRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._BrickName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._BrickName);
            }
        }
        
        /// <summary>
        ///Deserializes SetBrickNameRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetBrickNameRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._BrickName = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Query for the name of the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="QueryBrickNameRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Queries for the name of the LEGO NXT Brick.")]
    public class QueryBrickNameRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryBrickNameRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryBrickNameRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest)(target));
        }
        
        /// <summary>
        ///Clones QueryBrickNameRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryBrickNameRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes QueryBrickNameRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryBrickNameRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Indicates the name of the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="BrickNameResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the name of the LEGO NXT Brick.")]
    public class BrickNameResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BrickNameResponse() {
        }
        
        private string _BrickName;
        
        /// <summary>
        ///            The name of the LEGO NXT Brick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the name of the LEGO NXT Brick.")]
        public string BrickName {
            get {
                return this._BrickName;
            }
            set {
                this._BrickName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BrickNameResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse)(target));
            typedTarget._BrickName = this._BrickName;
        }
        
        /// <summary>
        ///Clones BrickNameResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BrickNameResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._BrickName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._BrickName);
            }
        }
        
        /// <summary>
        ///Deserializes BrickNameResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BrickNameResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._BrickName = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Specifies a Bluetooth Message which may be sent to or received from the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="BluetoothMessage")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a Bluetooth Message which may be sent to or received from the LEGO NXT " +
        "Brick.")]
    public class BluetoothMessage : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BluetoothMessage() {
        }
        
        public BluetoothMessage(int mailbox, string message) {
            this._Mailbox = mailbox;
            this._Message = message;
        }
        
        private int _Mailbox;
        
        /// <summary>
        ///            Indicates the mailbox where the message is delivered (1-10).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the mailbox where the message is delivered (1-10).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Mailbox {
            get {
                return this._Mailbox;
            }
            set {
                this._Mailbox = value;
            }
        }
        
        private string _Message;
        
        /// <summary>
        ///            Indicates the message which is sent to or received from the LEGO NXT Brick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the message which is sent to or received from the LEGO NXT Brick.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BluetoothMessage to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage)(target));
            typedTarget._Mailbox = this._Mailbox;
            typedTarget._Message = this._Message;
        }
        
        /// <summary>
        ///Clones BluetoothMessage
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BluetoothMessage to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Mailbox);
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
        }
        
        /// <summary>
        ///Deserializes BluetoothMessage
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BluetoothMessage</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Mailbox = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Receive a Bluetooth Message from the LEGO NXT Brick.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", ElementName="ReceiveBluetoothMessageRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Receives a Bluetooth Message from the LEGO NXT Brick.")]
    public class ReceiveBluetoothMessageRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReceiveBluetoothMessageRequest() {
        }
        
        public ReceiveBluetoothMessageRequest(int mailbox) {
            this._Mailbox = mailbox;
        }
        
        private int _Mailbox;
        
        /// <summary>
        ///            Specifies the mailbox to check for a message (1-10).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the mailbox to check for a message (1-10).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Mailbox {
            get {
                return this._Mailbox;
            }
            set {
                this._Mailbox = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReceiveBluetoothMessageRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest)(target));
            typedTarget._Mailbox = this._Mailbox;
        }
        
        /// <summary>
        ///Clones ReceiveBluetoothMessageRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest target0 = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReceiveBluetoothMessageRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Mailbox);
        }
        
        /// <summary>
        ///Deserializes ReceiveBluetoothMessageRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReceiveBluetoothMessageRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Mailbox = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the LEGO NXT Input Output Service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Search for one or more files on the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Searches for one or more files on the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryFiles : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles, global:: W3C.Soap.Fault>> {
        
        public QueryFiles() {
        }
        
        public QueryFiles(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body) : 
                base(body) {
        }
        
        public QueryFiles(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Delete a file on the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Deletes a file on the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteFile : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public DeleteFile() {
        }
        
        public DeleteFile(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body) : 
                base(body) {
        }
        
        public DeleteFile(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send a file to the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sends a file to the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CopyFileToBrick : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public CopyFileToBrick() {
        }
        
        public CopyFileToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body) : 
                base(body) {
        }
        
        public CopyFileToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Stop any program running on the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Stops any program running on the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StopProgram : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public StopProgram() {
        }
        
        public StopProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body) : 
                base(body) {
        }
        
        public StopProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Start running a program on the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Starts running a program on the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StartProgram : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public StartProgram() {
        }
        
        public StartProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body) : 
                base(body) {
        }
        
        public StartProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Query for any program running on the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Queries for any program running on the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryRunningProgram : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse, global:: W3C.Soap.Fault>> {
        
        public QueryRunningProgram() {
        }
        
        public QueryRunningProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body) : 
                base(body) {
        }
        
        public QueryRunningProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Change the Name of the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Changes the Name of the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetBrickName : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public SetBrickName() {
        }
        
        public SetBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body) : 
                base(body) {
        }
        
        public SetBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Query for the name of the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Queries for the name of the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryBrickName : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse, global:: W3C.Soap.Fault>> {
        
        public QueryBrickName() {
        }
        
        public QueryBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body) : 
                base(body) {
        }
        
        public QueryBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send a Bluetooth Message to the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sends a Bluetooth Message to the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendBluetoothMessage : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public SendBluetoothMessage() {
        }
        
        public SendBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body) : 
                base(body) {
        }
        
        public SendBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Receive a Bluetooth Message from the LEGO NXT Brick.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Receives a Bluetooth Message from the LEGO NXT Brick.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReceiveBluetoothMessage : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage, global:: W3C.Soap.Fault>> {
        
        public ReceiveBluetoothMessage() {
        }
        
        public ReceiveBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body) : 
                base(body) {
        }
        
        public ReceiveBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LEGO IO Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("LEGO IO Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NxtBrickOnboardOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage, global:: Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage> {
        
        public NxtBrickOnboardOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtIOState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles, global:: W3C.Soap.Fault> QueryFiles() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFiles(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ResponseFiles, global:: W3C.Soap.Fault> QueryFiles(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFiles(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFilesRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryFiles(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> DeleteFile() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteFile(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> DeleteFile(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteFile(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFileRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.DeleteFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> CopyFileToBrick() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CopyFileToBrick(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> CopyFileToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CopyFileToBrick(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendFileRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.CopyFileToBrick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> StopProgram() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StopProgram(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> StopProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StopProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopLegoProgramRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StopProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> StartProgram() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StartProgram(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> StartProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StartProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartLegoProgramRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.StartProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse, global:: W3C.Soap.Fault> QueryRunningProgram() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryRunningProgram(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.RunningProgramResponse, global:: W3C.Soap.Fault> QueryRunningProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryRunningProgram(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningLegoProgramRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryRunningProgram(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> SetBrickName() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetBrickName(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> SetBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickNameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SetBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse, global:: W3C.Soap.Fault> QueryBrickName() {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryBrickName(out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BrickNameResponse, global:: W3C.Soap.Fault> QueryBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryBrickName(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickNameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.QueryBrickName(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> SendBluetoothMessage(int mailbox, string message) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage(mailbox, message);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendBluetoothMessage(int mailbox, string message, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage(mailbox, message);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> SendBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.SendBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage, global:: W3C.Soap.Fault> ReceiveBluetoothMessage(int mailbox) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest(mailbox);
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReceiveBluetoothMessage(int mailbox, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage operation) {
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest(mailbox);
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.BluetoothMessage, global:: W3C.Soap.Fault> ReceiveBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReceiveBluetoothMessage(global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest body, out global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessageRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.ReceiveBluetoothMessage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Lego NXT Battery Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to programs and files on the LEGO� MINDSTORMS� NXT Brick (v2).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Lego NXT​ Brick I/O (v2)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.NxtBrickOnboardOperations = new global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtBrickOnboardOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.NxtBrickOnboardOperations, "http://schemas.microsoft.com/robotics/2007/07/lego/nxt/io.user.html", "NxtBrickOnboardOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Lego.Nxt.IO.Proxy.NxtBrickOnboardOperations NxtBrickOnboardOperations;
    }
}
